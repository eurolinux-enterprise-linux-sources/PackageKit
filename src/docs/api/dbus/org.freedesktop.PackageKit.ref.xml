<?xml version="1.0"?><!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN" "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd">
<refentry id="PackageKit">
  <refmeta>
    <refentrytitle role="top_of_page">org.freedesktop.PackageKit</refentrytitle>
  </refmeta>
  <refnamediv>
    <refname>org.freedesktop.PackageKit</refname>
    <refpurpose>PackageKit interface</refpurpose>
  </refnamediv>
  <refsynopsisdiv role="synopsis">
    <title role="synopsis.title">Methods</title>
    <synopsis><link linkend="PackageKit.CanAuthorize">CanAuthorize</link>       (in  's'  action_id,
                    out 's'  result)
<link linkend="PackageKit.GetActions">GetActions</link>         (out 's'  actions)
<link linkend="PackageKit.GetBackendDetail">GetBackendDetail</link>   (out 's'  name,
                    out 's'  author)
<link linkend="PackageKit.GetFilters">GetFilters</link>         (out 's'  filters)
<link linkend="PackageKit.GetGroups">GetGroups</link>          (out 's'  groups)
<link linkend="PackageKit.GetMimeTypes">GetMimeTypes</link>       (out 's'  types)
<link linkend="PackageKit.GetTid">GetTid</link>             (out 's'  tid)
<link linkend="PackageKit.GetTimeSinceAction">GetTimeSinceAction</link> (in  's'  role,
                    out 'u'  seconds)
<link linkend="PackageKit.GetTransactionList">GetTransactionList</link> (out 'as' transactions)
<link linkend="PackageKit.StateHasChanged">StateHasChanged</link>    (in  's'  reason)
<link linkend="PackageKit.SuggestDaemonQuit">SuggestDaemonQuit</link>  ()
<link linkend="PackageKit.GetNetworkState">GetNetworkState</link>    (out 's'  state)
<link linkend="PackageKit.GetDaemonState">GetDaemonState</link>     (out 's'  state)
<link linkend="PackageKit.SetProxy">SetProxy</link>           (in  's'  proxy_http,
                    in  's'  proxy_ftp)
</synopsis>
  </refsynopsisdiv>
  <refsect1 role="signal_proto">
    <title role="signal_proto.title">Signals</title>
    <synopsis><link linkend="PackageKit::TransactionListChanged">TransactionListChanged</link> ('as' transactions)
<link linkend="PackageKit::Locked">Locked</link>                 ('b'  is_locked)
<link linkend="PackageKit::NetworkStateChanged">NetworkStateChanged</link>    ('s'  state)
<link linkend="PackageKit::RestartSchedule">RestartSchedule</link>        ()
<link linkend="PackageKit::RepoListChanged">RepoListChanged</link>        ()
<link linkend="PackageKit::UpdatesChanged">UpdatesChanged</link>         ()
<link linkend="PackageKit::Changed">Changed</link>                ()
</synopsis>
  </refsect1>
  <refsect1 role="impl_interfaces">
    <title role="impl_interfaces.title">Implemented Interfaces</title>
    <para>org.freedesktop.PackageKit implements
    org.freedesktop.DBus.Introspectable,
    org.freedesktop.DBus.Properties
    </para>
  </refsect1>
  <refsect1 role="properties">
    <title role="properties.title">Properties</title>
    <synopsis><link linkend="PackageKit:VersionMajor">'VersionMajor'</link>       read      'u'
<link linkend="PackageKit:VersionMinor">'VersionMinor'</link>       read      'u'
<link linkend="PackageKit:VersionMicro">'VersionMicro'</link>       read      'u'
<link linkend="PackageKit:BackendName">'BackendName'</link>        read      's'
<link linkend="PackageKit:BackendDescription">'BackendDescription'</link> read      's'
<link linkend="PackageKit:BackendAuthor">'BackendAuthor'</link>      read      's'
<link linkend="PackageKit:Roles">'Roles'</link>              read      's'
<link linkend="PackageKit:Groups">'Groups'</link>             read      's'
<link linkend="PackageKit:Filters">'Filters'</link>            read      's'
<link linkend="PackageKit:MimeTypes">'MimeTypes'</link>          read      's'
<link linkend="PackageKit:Locked">'Locked'</link>             read      'b'
<link linkend="PackageKit:NetworkState">'NetworkState'</link>       read      's'
<link linkend="PackageKit:DistroId">'DistroId'</link>           read      's'
</synopsis>
  </refsect1>
  <refsect1 role="desc">
    <title role="desc.title">Description</title>
    <para>
      
        <para>
          The root interface is used for interacting with the daemon.
        </para>
      
    </para>
  </refsect1>
  <refsect1 role="details"><title role="details.title">Details</title><refsect2><title><anchor role="function" id="PackageKit.CanAuthorize"/>CanAuthorize ()</title><indexterm><primary>CanAuthorize</primary><secondary>PackageKit</secondary></indexterm><programlisting>CanAuthorize (in  's' action_id,
              out 's' result)</programlisting></refsect2>
          <para>
            Allows a client to find out if it would be allowed to authorize an action.
          </para>
        <variablelist role="params"><varlistentry><term><parameter>action_id</parameter>:</term><listitem><simpara>
            
              The action ID, e.g. org.freedesktop.packagekit.system-network-proxy-configure
            
          </simpara></listitem></varlistentry><varlistentry><term><parameter>result</parameter>:</term><listitem><simpara>
            
              The result, either yes, no or interactive.
            
          </simpara></listitem></varlistentry></variablelist><refsect2><title><anchor role="function" id="PackageKit.GetActions"/>GetActions ()</title><indexterm><primary>GetActions</primary><secondary>PackageKit</secondary></indexterm><programlisting>GetActions (out 's' actions)</programlisting></refsect2>
          <para>
            Gets a list of all the actions that are supported by the backend.
          </para>
          <para>
            THIS FUNCTION IS DEPRECATED. It will be removed in a future release.
            Use the properties interface for the transaction instead.
          </para>
        <variablelist role="params"><varlistentry><term><parameter>actions</parameter>:</term><listitem><simpara>
            
              A list of actions, e.g. search-name;get-updates;update-system
            
          </simpara></listitem></varlistentry></variablelist><refsect2><title><anchor role="function" id="PackageKit.GetBackendDetail"/>GetBackendDetail ()</title><indexterm><primary>GetBackendDetail</primary><secondary>PackageKit</secondary></indexterm><programlisting>GetBackendDetail (out 's' name,
                  out 's' author)</programlisting></refsect2>
          <para>
            Gets any details about the backend being used by PackageKit
          </para>
          <para>
            THIS FUNCTION IS DEPRECATED. It will be removed in a future release.
            Use the properties interface for the transaction instead.
          </para>
        <variablelist role="params"><varlistentry><term><parameter>name</parameter>:</term><listitem><simpara>
            
              The name of the backend, e.g. yum
            
          </simpara></listitem></varlistentry><varlistentry><term><parameter>author</parameter>:</term><listitem><simpara>
            
              The author of the backend, e.g. Richard Hughes &lt;richard@hughsie.com&gt;
            
          </simpara></listitem></varlistentry></variablelist><refsect2><title><anchor role="function" id="PackageKit.GetFilters"/>GetFilters ()</title><indexterm><primary>GetFilters</primary><secondary>PackageKit</secondary></indexterm><programlisting>GetFilters (out 's' filters)</programlisting></refsect2>
          <para>
            Gets the list of filters that the backend supports
          </para>
          <para>
            THIS FUNCTION IS DEPRECATED. It will be removed in a future release.
            Use the properties interface for the transaction instead.
          </para>
        <variablelist role="params"><varlistentry><term><parameter>filters</parameter>:</term><listitem><simpara>
            
              The list of filters as a string, e.g. installed;devel
            
          </simpara></listitem></varlistentry></variablelist><refsect2><title><anchor role="function" id="PackageKit.GetGroups"/>GetGroups ()</title><indexterm><primary>GetGroups</primary><secondary>PackageKit</secondary></indexterm><programlisting>GetGroups (out 's' groups)</programlisting></refsect2>
          <para>
            Gets the groups that are supported
          </para>
          <para>
            THIS FUNCTION IS DEPRECATED. It will be removed in a future release.
            Use the properties interface for the transaction instead.
          </para>
        <variablelist role="params"><varlistentry><term><parameter>groups</parameter>:</term><listitem><simpara>
            
              The group list, e.g. accesories;games;system
            
          </simpara></listitem></varlistentry></variablelist><refsect2><title><anchor role="function" id="PackageKit.GetMimeTypes"/>GetMimeTypes ()</title><indexterm><primary>GetMimeTypes</primary><secondary>PackageKit</secondary></indexterm><programlisting>GetMimeTypes (out 's' types)</programlisting></refsect2>
          <para>
            Gets the MIME types of packages that are supported
          </para>
          <para>
            THIS FUNCTION IS DEPRECATED. It will be removed in a future release.
            Use the properties interface for the transaction instead.
          </para>
        <variablelist role="params"><varlistentry><term><parameter>types</parameter>:</term><listitem><simpara>
            
              The MIME list, e.g. application/x-rpm;application/x-deb
            
          </simpara></listitem></varlistentry></variablelist><refsect2><title><anchor role="function" id="PackageKit.GetTid"/>GetTid ()</title><indexterm><primary>GetTid</primary><secondary>PackageKit</secondary></indexterm><programlisting>GetTid (out 's' tid)</programlisting></refsect2>
          <para>
            Gets a new transaction ID from the daemon
          </para>
        <variablelist role="params"><varlistentry><term><parameter>tid</parameter>:</term><listitem><simpara>
            
              The tid, e.g. 45_dafeca_checkpoint32
            
          </simpara></listitem></varlistentry></variablelist><refsect2><title><anchor role="function" id="PackageKit.GetTimeSinceAction"/>GetTimeSinceAction ()</title><indexterm><primary>GetTimeSinceAction</primary><secondary>PackageKit</secondary></indexterm><programlisting>GetTimeSinceAction (in  's' role,
                    out 'u' seconds)</programlisting></refsect2>
          <para>
            This method allows us to query how long since an action has successfully completed.
          </para>
        <variablelist role="params"><varlistentry><term><parameter>role</parameter>:</term><listitem><simpara>
            
              The role, e.g. update-system
            
          </simpara></listitem></varlistentry><varlistentry><term><parameter>seconds</parameter>:</term><listitem><simpara>
            
              The amount of time in seconds
            
          </simpara></listitem></varlistentry></variablelist><refsect2><title><anchor role="function" id="PackageKit.GetTransactionList"/>GetTransactionList ()</title><indexterm><primary>GetTransactionList</primary><secondary>PackageKit</secondary></indexterm><programlisting>GetTransactionList (out 'as' transactions)</programlisting></refsect2>
          <para>
            Gets the transaction list of any transactions that are in progress
          </para>
        <variablelist role="params"><varlistentry><term><parameter>transactions</parameter>:</term><listitem><simpara>
            
              A list of transaction ID's
            
          </simpara></listitem></varlistentry></variablelist><refsect2><title><anchor role="function" id="PackageKit.StateHasChanged"/>StateHasChanged ()</title><indexterm><primary>StateHasChanged</primary><secondary>PackageKit</secondary></indexterm><programlisting>StateHasChanged (in  's' reason)</programlisting></refsect2>
          <para>
            This method suggests to PackageKit that the package backend state may have changed.
            This allows plugins to the native package manager to suggest that PackageKit drops
            it's caches.
          </para>
        <variablelist role="params"><varlistentry><term><parameter>reason</parameter>:</term><listitem><simpara>
            
              The reason of the state change. Valid reasons are resume or
              posttrans.
              Resume is given a lower priority than posttrans.
            
          </simpara></listitem></varlistentry></variablelist><refsect2><title><anchor role="function" id="PackageKit.SuggestDaemonQuit"/>SuggestDaemonQuit ()</title><indexterm><primary>SuggestDaemonQuit</primary><secondary>PackageKit</secondary></indexterm><programlisting>SuggestDaemonQuit ()</programlisting></refsect2>
          <para>
            Suggests to the daemon that it should quit as soon as possible, for instance if a native
            package management tool is waiting to be used.
          </para>
        <variablelist role="params"/><refsect2><title><anchor role="function" id="PackageKit.GetNetworkState"/>GetNetworkState ()</title><indexterm><primary>GetNetworkState</primary><secondary>PackageKit</secondary></indexterm><programlisting>GetNetworkState (out 's' state)</programlisting></refsect2>
          <para>
            Gets the network state from the daemon. This is provided as some clients may not want
            to use NetworkManager if the system daemon is configured to use something else.
          </para>
          <para>
            THIS FUNCTION IS DEPRECATED. It will be removed in a future release.
            Use the properties interface for the transaction instead.
          </para>
        <variablelist role="params"><varlistentry><term><parameter>state</parameter>:</term><listitem><simpara>
            
              The network state. If the system is managed using NetworkManager then the following
              states are supported:
              unknown, offline, online,
              wifi, mobile or wired.
              If the system is configured for legacy UNIX network fallback, or NetworkManager
              is not running then the folowing states are supported:
              unknown, offline or online.
            
          </simpara></listitem></varlistentry></variablelist><refsect2><title><anchor role="function" id="PackageKit.GetDaemonState"/>GetDaemonState ()</title><indexterm><primary>GetDaemonState</primary><secondary>PackageKit</secondary></indexterm><programlisting>GetDaemonState (out 's' state)</programlisting></refsect2>
          <para>
            Gets the debugging state from the daemon.
            No secure state will be shown, and all information is for reference only.
          </para>
        <variablelist role="params"><varlistentry><term><parameter>state</parameter>:</term><listitem><simpara>
            
              The state of the dameon at this specific moment.
            
          </simpara></listitem></varlistentry></variablelist><refsect2><title><anchor role="function" id="PackageKit.SetProxy"/>SetProxy ()</title><indexterm><primary>SetProxy</primary><secondary>PackageKit</secondary></indexterm><programlisting>SetProxy (in  's' proxy_http,
          in  's' proxy_ftp)</programlisting></refsect2>
          <para>
            Sets the proxy used by the dameon.
          </para>
        <variablelist role="params"><varlistentry><term><parameter>proxy_http</parameter>:</term><listitem><simpara>
            
              The HTTP proxy, e.g. username:password@server:port.
            
          </simpara></listitem></varlistentry><varlistentry><term><parameter>proxy_ftp</parameter>:</term><listitem><simpara>
            
              The FTP proxy, e.g. username:password@server:port.
            
          </simpara></listitem></varlistentry></variablelist><para role="permission">Callers need the org.freedesktop.packagekit.set-proxy</para></refsect1>
  <refsect1 role="signals"><title role="signals.title">Signal Details</title><refsect2><title><anchor role="function" id="PackageKit::TransactionListChanged"/>The TransactionListChanged signal</title><indexterm><primary>TransactionListChanged</primary><secondary>PackageKit</secondary></indexterm><programlisting>TransactionListChanged ('as' transactions)</programlisting></refsect2>
          <para>
            The transaction list has changed, because either a transaction has finished or a new
            transaction created.
          </para>
        <variablelist role="params"><varlistentry><term><parameter>transactions</parameter>:</term><listitem><simpara>
            
              A list of transaction ID's.
            
          </simpara></listitem></varlistentry></variablelist><refsect2><title><anchor role="function" id="PackageKit::Locked"/>The Locked signal</title><indexterm><primary>Locked</primary><secondary>PackageKit</secondary></indexterm><programlisting>Locked ('b' is_locked)</programlisting></refsect2>
          <para>
            This signal is emitted when the backend is locked and native tools would fail.
          </para>
          <para>
            THIS FUNCTION IS DEPRECATED. It will be removed in a future release.
            Use the properties interface for the transaction instead.
          </para>
        <variablelist role="params"><varlistentry><term><parameter>is_locked</parameter>:</term><listitem><simpara>
            
              If we have locked the package backend.
            
          </simpara></listitem></varlistentry></variablelist><refsect2><title><anchor role="function" id="PackageKit::NetworkStateChanged"/>The NetworkStateChanged signal</title><indexterm><primary>NetworkStateChanged</primary><secondary>PackageKit</secondary></indexterm><programlisting>NetworkStateChanged ('s' state)</programlisting></refsect2>
          <para>
            This signal is emitted when the network state has changed
          </para>
          <para>
            THIS FUNCTION IS DEPRECATED. It will be removed in a future release.
            Use the properties interface for the transaction instead.
          </para>
        <variablelist role="params"><varlistentry><term><parameter>state</parameter>:</term><listitem><simpara>
            
              The new network state
            
          </simpara></listitem></varlistentry></variablelist><refsect2><title><anchor role="function" id="PackageKit::RestartSchedule"/>The RestartSchedule signal</title><indexterm><primary>RestartSchedule</primary><secondary>PackageKit</secondary></indexterm><programlisting>RestartSchedule ()</programlisting></refsect2>
          <para>
            A system restart has been sceduled
          </para>
        <variablelist role="params"/><refsect2><title><anchor role="function" id="PackageKit::RepoListChanged"/>The RepoListChanged signal</title><indexterm><primary>RepoListChanged</primary><secondary>PackageKit</secondary></indexterm><programlisting>RepoListChanged ()</programlisting></refsect2>
          <para>
            This signal is emitted when the repository list has changed
          </para>
        <variablelist role="params"/><refsect2><title><anchor role="function" id="PackageKit::UpdatesChanged"/>The UpdatesChanged signal</title><indexterm><primary>UpdatesChanged</primary><secondary>PackageKit</secondary></indexterm><programlisting>UpdatesChanged ()</programlisting></refsect2>
          <para>
            This signal is emitted when the number of updates has changed
          </para>
        <variablelist role="params"/><refsect2><title><anchor role="function" id="PackageKit::Changed"/>The Changed signal</title><indexterm><primary>Changed</primary><secondary>PackageKit</secondary></indexterm><programlisting>Changed ()</programlisting></refsect2>
          <para>
            This signal is emitted when a property on the interface changes.
          </para>
        <variablelist role="params"/></refsect1>
  <refsect1 role="property_details"><title role="property_details.title">Property Details</title><refsect2><title><anchor role="function" id="PackageKit:VersionMajor"/>The "VersionMajor" property</title><indexterm><primary>VersionMajor</primary><secondary>PackageKit</secondary></indexterm><programlisting>'VersionMajor'  read      'u'
</programlisting></refsect2>
          <para>
            The major version number.
          </para>
        <variablelist role="params"/><refsect2><title><anchor role="function" id="PackageKit:VersionMinor"/>The "VersionMinor" property</title><indexterm><primary>VersionMinor</primary><secondary>PackageKit</secondary></indexterm><programlisting>'VersionMinor'  read      'u'
</programlisting></refsect2>
          <para>
            The minor version number.
          </para>
        <variablelist role="params"/><refsect2><title><anchor role="function" id="PackageKit:VersionMicro"/>The "VersionMicro" property</title><indexterm><primary>VersionMicro</primary><secondary>PackageKit</secondary></indexterm><programlisting>'VersionMicro'  read      'u'
</programlisting></refsect2>
          <para>
            The micro version number.
          </para>
        <variablelist role="params"/><refsect2><title><anchor role="function" id="PackageKit:BackendName"/>The "BackendName" property</title><indexterm><primary>BackendName</primary><secondary>PackageKit</secondary></indexterm><programlisting>'BackendName'  read      's'
</programlisting></refsect2>
          <para>
            The backend name, e.g. "yum".
          </para>
        <variablelist role="params"/><refsect2><title><anchor role="function" id="PackageKit:BackendDescription"/>The "BackendDescription" property</title><indexterm><primary>BackendDescription</primary><secondary>PackageKit</secondary></indexterm><programlisting>'BackendDescription'  read      's'
</programlisting></refsect2>
          <para>
            The backend description, e.g. "Yellow Dog Update Modifier".
          </para>
        <variablelist role="params"/><refsect2><title><anchor role="function" id="PackageKit:BackendAuthor"/>The "BackendAuthor" property</title><indexterm><primary>BackendAuthor</primary><secondary>PackageKit</secondary></indexterm><programlisting>'BackendAuthor'  read      's'
</programlisting></refsect2>
          <para>
            The backend author, e.g. "Joe Bloggs &lt;joe&amp;blogs.com&gt;".
          </para>
        <variablelist role="params"/><refsect2><title><anchor role="function" id="PackageKit:Roles"/>The "Roles" property</title><indexterm><primary>Roles</primary><secondary>PackageKit</secondary></indexterm><programlisting>'Roles'  read      's'
</programlisting></refsect2>
          <para>
            The roles the backend supports, e.g. "search-name;refresh-cache".
          </para>
        <variablelist role="params"/><refsect2><title><anchor role="function" id="PackageKit:Groups"/>The "Groups" property</title><indexterm><primary>Groups</primary><secondary>PackageKit</secondary></indexterm><programlisting>'Groups'  read      's'
</programlisting></refsect2>
          <para>
            The groups the backend supports, e.g. "accessories;games".
          </para>
        <variablelist role="params"/><refsect2><title><anchor role="function" id="PackageKit:Filters"/>The "Filters" property</title><indexterm><primary>Filters</primary><secondary>PackageKit</secondary></indexterm><programlisting>'Filters'  read      's'
</programlisting></refsect2>
          <para>
            The filters the backend supports, e.g. "installed;newest".
          </para>
        <variablelist role="params"/><refsect2><title><anchor role="function" id="PackageKit:MimeTypes"/>The "MimeTypes" property</title><indexterm><primary>MimeTypes</primary><secondary>PackageKit</secondary></indexterm><programlisting>'MimeTypes'  read      's'
</programlisting></refsect2>
          <para>
            The mime-types the backend supports, e.g. "application/x-rpm;application/x-deb".
          </para>
        <variablelist role="params"/><refsect2><title><anchor role="function" id="PackageKit:Locked"/>The "Locked" property</title><indexterm><primary>Locked</primary><secondary>PackageKit</secondary></indexterm><programlisting>'Locked'  read      'b'
</programlisting></refsect2>
          <para>
            Set when the backend is locked and native tools would fail.
          </para>
        <variablelist role="params"/><refsect2><title><anchor role="function" id="PackageKit:NetworkState"/>The "NetworkState" property</title><indexterm><primary>NetworkState</primary><secondary>PackageKit</secondary></indexterm><programlisting>'NetworkState'  read      's'
</programlisting></refsect2>
          <para>
            Gets the network state from the daemon. This is provided as some clients may not want
            to use NetworkManager if the system daemon is configured to use something else.
          </para>
          <para>
            If the system is managed using NetworkManager then the following
            states are supported:
            unknown, offline, online,
            wifi, mobile or wired.
            If the system is configured for legacy UNIX network fallback, or NetworkManager
            is not running then the folowing states are supported:
            unknown, offline or online.
          </para>
        <variablelist role="params"/><refsect2><title><anchor role="function" id="PackageKit:DistroId"/>The "DistroId" property</title><indexterm><primary>DistroId</primary><secondary>PackageKit</secondary></indexterm><programlisting>'DistroId'  read      's'
</programlisting></refsect2>
          <para>
            The distribution identification, in the
            distro;version;arch form e.g.
            "debian;squeeze/sid;x86_64".
          </para>
        <variablelist role="params"/></refsect1>
</refentry>
