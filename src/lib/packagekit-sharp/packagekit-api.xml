<?xml version="1.0"?>
<api>
  <!--

        This file was automatically generated.
        Please DO NOT MODIFY THIS FILE, modify .metadata files instead.

-->
  <namespace library="libpackagekit-glib.dll" name="PackageKit">
    <enum name="CatalogProgress" cname="PkCatalogProgress" type="enum">
      <member cname="PK_CATALOG_PROGRESS_PACKAGES" name="Packages" />
      <member cname="PK_CATALOG_PROGRESS_FILES" name="Files" />
      <member cname="PK_CATALOG_PROGRESS_PROVIDES" name="Provides" />
      <member cname="PK_CATALOG_PROGRESS_LAST" name="Last" />
    </enum>
    <enum name="ClientError" cname="PkClientError" gtype="pk_client_error_get_type" type="enum">
      <member cname="PK_CLIENT_ERROR_FAILED" name="Failed" />
      <member cname="PK_CLIENT_ERROR_FAILED_AUTH" name="FailedAuth" />
      <member cname="PK_CLIENT_ERROR_NO_TID" name="NoTid" />
      <member cname="PK_CLIENT_ERROR_ALREADY_TID" name="AlreadyTid" />
      <member cname="PK_CLIENT_ERROR_ROLE_UNKNOWN" name="RoleUnknown" />
      <member cname="PK_CLIENT_ERROR_CANNOT_START_DAEMON" name="CannotStartDaemon" />
      <member cname="PK_CLIENT_ERROR_INVALID_INPUT" name="InvalidInput" />
      <member cname="PK_CLIENT_ERROR_INVALID_FILE" name="InvalidFile" />
      <member cname="PK_CLIENT_ERROR_NOT_SUPPORTED" name="NotSupported" />
    </enum>
    <enum name="ControlError" cname="PkControlError" type="enum">
      <member cname="PK_CONTROL_ERROR_FAILED" name="Failed" />
      <member cname="PK_CONTROL_ERROR_CANNOT_START_DAEMON" name="CannotStartDaemon" />
    </enum>
    <enum name="DistroUpgradeEnum" cname="PkDistroUpgradeEnum" type="enum">
      <member cname="PK_DISTRO_UPGRADE_ENUM_STABLE" name="Stable" />
      <member cname="PK_DISTRO_UPGRADE_ENUM_UNSTABLE" name="Unstable" />
      <member cname="PK_DISTRO_UPGRADE_ENUM_UNKNOWN" name="Unknown" />
    </enum>
    <enum name="ErrorCodeEnum" cname="PkErrorCodeEnum" type="enum">
      <member cname="PK_ERROR_ENUM_OOM" name="Oom" />
      <member cname="PK_ERROR_ENUM_NO_NETWORK" name="NoNetwork" />
      <member cname="PK_ERROR_ENUM_NOT_SUPPORTED" name="NotSupported" />
      <member cname="PK_ERROR_ENUM_INTERNAL_ERROR" name="InternalError" />
      <member cname="PK_ERROR_ENUM_GPG_FAILURE" name="GpgFailure" />
      <member cname="PK_ERROR_ENUM_PACKAGE_ID_INVALID" name="PackageIdInvalid" />
      <member cname="PK_ERROR_ENUM_PACKAGE_NOT_INSTALLED" name="PackageNotInstalled" />
      <member cname="PK_ERROR_ENUM_PACKAGE_NOT_FOUND" name="PackageNotFound" />
      <member cname="PK_ERROR_ENUM_PACKAGE_ALREADY_INSTALLED" name="PackageAlreadyInstalled" />
      <member cname="PK_ERROR_ENUM_PACKAGE_DOWNLOAD_FAILED" name="PackageDownloadFailed" />
      <member cname="PK_ERROR_ENUM_GROUP_NOT_FOUND" name="GroupNotFound" />
      <member cname="PK_ERROR_ENUM_GROUP_LIST_INVALID" name="GroupListInvalid" />
      <member cname="PK_ERROR_ENUM_DEP_RESOLUTION_FAILED" name="DepResolutionFailed" />
      <member cname="PK_ERROR_ENUM_FILTER_INVALID" name="FilterInvalid" />
      <member cname="PK_ERROR_ENUM_CREATE_THREAD_FAILED" name="CreateThreadFailed" />
      <member cname="PK_ERROR_ENUM_TRANSACTION_ERROR" name="TransactionError" />
      <member cname="PK_ERROR_ENUM_TRANSACTION_CANCELLED" name="TransactionCancelled" />
      <member cname="PK_ERROR_ENUM_NO_CACHE" name="NoCache" />
      <member cname="PK_ERROR_ENUM_REPO_NOT_FOUND" name="RepoNotFound" />
      <member cname="PK_ERROR_ENUM_CANNOT_REMOVE_SYSTEM_PACKAGE" name="CannotRemoveSystemPackage" />
      <member cname="PK_ERROR_ENUM_PROCESS_KILL" name="ProcessKill" />
      <member cname="PK_ERROR_ENUM_FAILED_INITIALIZATION" name="FailedInitialization" />
      <member cname="PK_ERROR_ENUM_FAILED_FINALISE" name="FailedFinalise" />
      <member cname="PK_ERROR_ENUM_FAILED_CONFIG_PARSING" name="FailedConfigParsing" />
      <member cname="PK_ERROR_ENUM_CANNOT_CANCEL" name="CannotCancel" />
      <member cname="PK_ERROR_ENUM_CANNOT_GET_LOCK" name="CannotGetLock" />
      <member cname="PK_ERROR_ENUM_NO_PACKAGES_TO_UPDATE" name="NoPackagesToUpdate" />
      <member cname="PK_ERROR_ENUM_CANNOT_WRITE_REPO_CONFIG" name="CannotWriteRepoConfig" />
      <member cname="PK_ERROR_ENUM_LOCAL_INSTALL_FAILED" name="LocalInstallFailed" />
      <member cname="PK_ERROR_ENUM_BAD_GPG_SIGNATURE" name="BadGpgSignature" />
      <member cname="PK_ERROR_ENUM_MISSING_GPG_SIGNATURE" name="MissingGpgSignature" />
      <member cname="PK_ERROR_ENUM_CANNOT_INSTALL_SOURCE_PACKAGE" name="CannotInstallSourcePackage" />
      <member cname="PK_ERROR_ENUM_REPO_CONFIGURATION_ERROR" name="RepoConfigurationError" />
      <member cname="PK_ERROR_ENUM_NO_LICENSE_AGREEMENT" name="NoLicenseAgreement" />
      <member cname="PK_ERROR_ENUM_FILE_CONFLICTS" name="FileConflicts" />
      <member cname="PK_ERROR_ENUM_PACKAGE_CONFLICTS" name="PackageConflicts" />
      <member cname="PK_ERROR_ENUM_REPO_NOT_AVAILABLE" name="RepoNotAvailable" />
      <member cname="PK_ERROR_ENUM_INVALID_PACKAGE_FILE" name="InvalidPackageFile" />
      <member cname="PK_ERROR_ENUM_PACKAGE_INSTALL_BLOCKED" name="PackageInstallBlocked" />
      <member cname="PK_ERROR_ENUM_PACKAGE_CORRUPT" name="PackageCorrupt" />
      <member cname="PK_ERROR_ENUM_ALL_PACKAGES_ALREADY_INSTALLED" name="AllPackagesAlreadyInstalled" />
      <member cname="PK_ERROR_ENUM_FILE_NOT_FOUND" name="FileNotFound" />
      <member cname="PK_ERROR_ENUM_NO_MORE_MIRRORS_TO_TRY" name="NoMoreMirrorsToTry" />
      <member cname="PK_ERROR_ENUM_NO_DISTRO_UPGRADE_DATA" name="NoDistroUpgradeData" />
      <member cname="PK_ERROR_ENUM_INCOMPATIBLE_ARCHITECTURE" name="IncompatibleArchitecture" />
      <member cname="PK_ERROR_ENUM_NO_SPACE_ON_DEVICE" name="NoSpaceOnDevice" />
      <member cname="PK_ERROR_ENUM_UNKNOWN" name="Unknown" />
    </enum>
    <enum name="ExitEnum" cname="PkExitEnum" type="enum">
      <member cname="PK_EXIT_ENUM_SUCCESS" name="Success" />
      <member cname="PK_EXIT_ENUM_FAILED" name="Failed" />
      <member cname="PK_EXIT_ENUM_CANCELLED" name="Cancelled" />
      <member cname="PK_EXIT_ENUM_KEY_REQUIRED" name="KeyRequired" />
      <member cname="PK_EXIT_ENUM_EULA_REQUIRED" name="EulaRequired" />
      <member cname="PK_EXIT_ENUM_KILLED" name="Killed" />
      <member cname="PK_EXIT_ENUM_UNKNOWN" name="Unknown" />
    </enum>
    <enum name="FilterEnum" cname="PkFilterEnum" type="enum">
      <member cname="PK_FILTER_ENUM_NONE" name="None" />
      <member cname="PK_FILTER_ENUM_INSTALLED" name="Installed" />
      <member cname="PK_FILTER_ENUM_NOT_INSTALLED" name="NotInstalled" />
      <member cname="PK_FILTER_ENUM_DEVELOPMENT" name="Development" />
      <member cname="PK_FILTER_ENUM_NOT_DEVELOPMENT" name="NotDevelopment" />
      <member cname="PK_FILTER_ENUM_GUI" name="Gui" />
      <member cname="PK_FILTER_ENUM_NOT_GUI" name="NotGui" />
      <member cname="PK_FILTER_ENUM_FREE" name="Free" />
      <member cname="PK_FILTER_ENUM_NOT_FREE" name="NotFree" />
      <member cname="PK_FILTER_ENUM_VISIBLE" name="Visible" />
      <member cname="PK_FILTER_ENUM_NOT_VISIBLE" name="NotVisible" />
      <member cname="PK_FILTER_ENUM_SUPPORTED" name="Supported" />
      <member cname="PK_FILTER_ENUM_NOT_SUPPORTED" name="NotSupported" />
      <member cname="PK_FILTER_ENUM_BASENAME" name="Basename" />
      <member cname="PK_FILTER_ENUM_NOT_BASENAME" name="NotBasename" />
      <member cname="PK_FILTER_ENUM_NEWEST" name="Newest" />
      <member cname="PK_FILTER_ENUM_NOT_NEWEST" name="NotNewest" />
      <member cname="PK_FILTER_ENUM_ARCH" name="Arch" />
      <member cname="PK_FILTER_ENUM_NOT_ARCH" name="NotArch" />
      <member cname="PK_FILTER_ENUM_SOURCE" name="Source" />
      <member cname="PK_FILTER_ENUM_NOT_SOURCE" name="NotSource" />
      <member cname="PK_FILTER_ENUM_COLLECTIONS" name="Collections" />
      <member cname="PK_FILTER_ENUM_NOT_COLLECTIONS" name="NotCollections" />
      <member cname="PK_FILTER_ENUM_UNKNOWN" name="Unknown" />
    </enum>
    <enum name="GroupEnum" cname="PkGroupEnum" type="enum">
      <member cname="PK_GROUP_ENUM_ACCESSIBILITY" name="Accessibility" />
      <member cname="PK_GROUP_ENUM_ACCESSORIES" name="Accessories" />
      <member cname="PK_GROUP_ENUM_ADMIN_TOOLS" name="AdminTools" />
      <member cname="PK_GROUP_ENUM_COMMUNICATION" name="Communication" />
      <member cname="PK_GROUP_ENUM_DESKTOP_GNOME" name="DesktopGnome" />
      <member cname="PK_GROUP_ENUM_DESKTOP_KDE" name="DesktopKde" />
      <member cname="PK_GROUP_ENUM_DESKTOP_OTHER" name="DesktopOther" />
      <member cname="PK_GROUP_ENUM_DESKTOP_XFCE" name="DesktopXfce" />
      <member cname="PK_GROUP_ENUM_EDUCATION" name="Education" />
      <member cname="PK_GROUP_ENUM_FONTS" name="Fonts" />
      <member cname="PK_GROUP_ENUM_GAMES" name="Games" />
      <member cname="PK_GROUP_ENUM_GRAPHICS" name="Graphics" />
      <member cname="PK_GROUP_ENUM_INTERNET" name="Internet" />
      <member cname="PK_GROUP_ENUM_LEGACY" name="Legacy" />
      <member cname="PK_GROUP_ENUM_LOCALIZATION" name="Localization" />
      <member cname="PK_GROUP_ENUM_MAPS" name="Maps" />
      <member cname="PK_GROUP_ENUM_MULTIMEDIA" name="Multimedia" />
      <member cname="PK_GROUP_ENUM_NETWORK" name="Network" />
      <member cname="PK_GROUP_ENUM_OFFICE" name="Office" />
      <member cname="PK_GROUP_ENUM_OTHER" name="Other" />
      <member cname="PK_GROUP_ENUM_POWER_MANAGEMENT" name="PowerManagement" />
      <member cname="PK_GROUP_ENUM_PROGRAMMING" name="Programming" />
      <member cname="PK_GROUP_ENUM_PUBLISHING" name="Publishing" />
      <member cname="PK_GROUP_ENUM_REPOS" name="Repos" />
      <member cname="PK_GROUP_ENUM_SECURITY" name="Security" />
      <member cname="PK_GROUP_ENUM_SERVERS" name="Servers" />
      <member cname="PK_GROUP_ENUM_SYSTEM" name="System" />
      <member cname="PK_GROUP_ENUM_VIRTUALIZATION" name="Virtualization" />
      <member cname="PK_GROUP_ENUM_SCIENCE" name="Science" />
      <member cname="PK_GROUP_ENUM_DOCUMENTATION" name="Documentation" />
      <member cname="PK_GROUP_ENUM_ELECTRONICS" name="Electronics" />
      <member cname="PK_GROUP_ENUM_COLLECTIONS" name="Collections" />
      <member cname="PK_GROUP_ENUM_VENDOR" name="Vendor" />
      <member cname="PK_GROUP_ENUM_NEWEST" name="Newest" />
      <member cname="PK_GROUP_ENUM_UNKNOWN" name="Unknown" />
    </enum>
    <enum name="InfoEnum" cname="PkInfoEnum" type="enum">
      <member cname="PK_INFO_ENUM_INSTALLED" name="Installed" />
      <member cname="PK_INFO_ENUM_AVAILABLE" name="Available" />
      <member cname="PK_INFO_ENUM_LOW" name="Low" />
      <member cname="PK_INFO_ENUM_ENHANCEMENT" name="Enhancement" />
      <member cname="PK_INFO_ENUM_NORMAL" name="Normal" />
      <member cname="PK_INFO_ENUM_BUGFIX" name="Bugfix" />
      <member cname="PK_INFO_ENUM_IMPORTANT" name="Important" />
      <member cname="PK_INFO_ENUM_SECURITY" name="Security" />
      <member cname="PK_INFO_ENUM_BLOCKED" name="Blocked" />
      <member cname="PK_INFO_ENUM_DOWNLOADING" name="Downloading" />
      <member cname="PK_INFO_ENUM_UPDATING" name="Updating" />
      <member cname="PK_INFO_ENUM_INSTALLING" name="Installing" />
      <member cname="PK_INFO_ENUM_REMOVING" name="Removing" />
      <member cname="PK_INFO_ENUM_CLEANUP" name="Cleanup" />
      <member cname="PK_INFO_ENUM_OBSOLETING" name="Obsoleting" />
      <member cname="PK_INFO_ENUM_COLLECTION_INSTALLED" name="CollectionInstalled" />
      <member cname="PK_INFO_ENUM_COLLECTION_AVAILABLE" name="CollectionAvailable" />
      <member cname="PK_INFO_ENUM_UNKNOWN" name="Unknown" />
    </enum>
    <enum name="LicenseEnum" cname="PkLicenseEnum" type="enum">
      <member cname="PK_LICENSE_ENUM_GLIDE" name="Glide" />
      <member cname="PK_LICENSE_ENUM_AFL" name="Afl" />
      <member cname="PK_LICENSE_ENUM_AMPAS_BSD" name="AmpasBsd" />
      <member cname="PK_LICENSE_ENUM_AMAZON_DSL" name="AmazonDsl" />
      <member cname="PK_LICENSE_ENUM_ADOBE" name="Adobe" />
      <member cname="PK_LICENSE_ENUM_AGPLV1" name="Agplv1" />
      <member cname="PK_LICENSE_ENUM_AGPLV3" name="Agplv3" />
      <member cname="PK_LICENSE_ENUM_ASL_1_DOT_0" name="Asl1Dot0" />
      <member cname="PK_LICENSE_ENUM_ASL_1_DOT_1" name="Asl1Dot1" />
      <member cname="PK_LICENSE_ENUM_ASL_2_DOT_0" name="Asl2Dot0" />
      <member cname="PK_LICENSE_ENUM_APSL_2_DOT_0" name="Apsl2Dot0" />
      <member cname="PK_LICENSE_ENUM_ARTISTIC_CLARIFIED" name="ArtisticClarified" />
      <member cname="PK_LICENSE_ENUM_ARTISTIC_2_DOT_0" name="Artistic2Dot0" />
      <member cname="PK_LICENSE_ENUM_ARL" name="Arl" />
      <member cname="PK_LICENSE_ENUM_BITTORRENT" name="Bittorrent" />
      <member cname="PK_LICENSE_ENUM_BOOST" name="Boost" />
      <member cname="PK_LICENSE_ENUM_BSD_WITH_ADVERTISING" name="BsdWithAdvertising" />
      <member cname="PK_LICENSE_ENUM_BSD" name="Bsd" />
      <member cname="PK_LICENSE_ENUM_CECILL" name="Cecill" />
      <member cname="PK_LICENSE_ENUM_CDDL" name="Cddl" />
      <member cname="PK_LICENSE_ENUM_CPL" name="Cpl" />
      <member cname="PK_LICENSE_ENUM_CONDOR" name="Condor" />
      <member cname="PK_LICENSE_ENUM_COPYRIGHT_ONLY" name="CopyrightOnly" />
      <member cname="PK_LICENSE_ENUM_CRYPTIX" name="Cryptix" />
      <member cname="PK_LICENSE_ENUM_CRYSTAL_STACKER" name="CrystalStacker" />
      <member cname="PK_LICENSE_ENUM_DOC" name="Doc" />
      <member cname="PK_LICENSE_ENUM_WTFPL" name="Wtfpl" />
      <member cname="PK_LICENSE_ENUM_EPL" name="Epl" />
      <member cname="PK_LICENSE_ENUM_ECOS" name="Ecos" />
      <member cname="PK_LICENSE_ENUM_EFL_2_DOT_0" name="Efl2Dot0" />
      <member cname="PK_LICENSE_ENUM_EU_DATAGRID" name="EuDatagrid" />
      <member cname="PK_LICENSE_ENUM_LGPLV2_WITH_EXCEPTIONS" name="Lgplv2WithExceptions" />
      <member cname="PK_LICENSE_ENUM_FTL" name="Ftl" />
      <member cname="PK_LICENSE_ENUM_GIFTWARE" name="Giftware" />
      <member cname="PK_LICENSE_ENUM_GPLV2" name="Gplv2" />
      <member cname="PK_LICENSE_ENUM_GPLV2_WITH_EXCEPTIONS" name="Gplv2WithExceptions" />
      <member cname="PK_LICENSE_ENUM_GPLV2_PLUS_WITH_EXCEPTIONS" name="Gplv2PlusWithExceptions" />
      <member cname="PK_LICENSE_ENUM_GPLV3" name="Gplv3" />
      <member cname="PK_LICENSE_ENUM_GPLV3_WITH_EXCEPTIONS" name="Gplv3WithExceptions" />
      <member cname="PK_LICENSE_ENUM_GPLV3_PLUS_WITH_EXCEPTIONS" name="Gplv3PlusWithExceptions" />
      <member cname="PK_LICENSE_ENUM_LGPLV2" name="Lgplv2" />
      <member cname="PK_LICENSE_ENUM_LGPLV3" name="Lgplv3" />
      <member cname="PK_LICENSE_ENUM_GNUPLOT" name="Gnuplot" />
      <member cname="PK_LICENSE_ENUM_IBM" name="Ibm" />
      <member cname="PK_LICENSE_ENUM_IMATIX" name="Imatix" />
      <member cname="PK_LICENSE_ENUM_IMAGEMAGICK" name="Imagemagick" />
      <member cname="PK_LICENSE_ENUM_IMLIB2" name="Imlib2" />
      <member cname="PK_LICENSE_ENUM_IJG" name="Ijg" />
      <member cname="PK_LICENSE_ENUM_INTEL_ACPI" name="IntelAcpi" />
      <member cname="PK_LICENSE_ENUM_INTERBASE" name="Interbase" />
      <member cname="PK_LICENSE_ENUM_ISC" name="Isc" />
      <member cname="PK_LICENSE_ENUM_JABBER" name="Jabber" />
      <member cname="PK_LICENSE_ENUM_JASPER" name="Jasper" />
      <member cname="PK_LICENSE_ENUM_LPPL" name="Lppl" />
      <member cname="PK_LICENSE_ENUM_LIBTIFF" name="Libtiff" />
      <member cname="PK_LICENSE_ENUM_LPL" name="Lpl" />
      <member cname="PK_LICENSE_ENUM_MECAB_IPADIC" name="MecabIpadic" />
      <member cname="PK_LICENSE_ENUM_MIT" name="Mit" />
      <member cname="PK_LICENSE_ENUM_MIT_WITH_ADVERTISING" name="MitWithAdvertising" />
      <member cname="PK_LICENSE_ENUM_MPLV1_DOT_0" name="Mplv1Dot0" />
      <member cname="PK_LICENSE_ENUM_MPLV1_DOT_1" name="Mplv1Dot1" />
      <member cname="PK_LICENSE_ENUM_NCSA" name="Ncsa" />
      <member cname="PK_LICENSE_ENUM_NGPL" name="Ngpl" />
      <member cname="PK_LICENSE_ENUM_NOSL" name="Nosl" />
      <member cname="PK_LICENSE_ENUM_NETCDF" name="Netcdf" />
      <member cname="PK_LICENSE_ENUM_NETSCAPE" name="Netscape" />
      <member cname="PK_LICENSE_ENUM_NOKIA" name="Nokia" />
      <member cname="PK_LICENSE_ENUM_OPENLDAP" name="Openldap" />
      <member cname="PK_LICENSE_ENUM_OPENPBS" name="Openpbs" />
      <member cname="PK_LICENSE_ENUM_OSL_1_DOT_0" name="Osl1Dot0" />
      <member cname="PK_LICENSE_ENUM_OSL_1_DOT_1" name="Osl1Dot1" />
      <member cname="PK_LICENSE_ENUM_OSL_2_DOT_0" name="Osl2Dot0" />
      <member cname="PK_LICENSE_ENUM_OSL_3_DOT_0" name="Osl3Dot0" />
      <member cname="PK_LICENSE_ENUM_OPENSSL" name="Openssl" />
      <member cname="PK_LICENSE_ENUM_OREILLY" name="Oreilly" />
      <member cname="PK_LICENSE_ENUM_PHORUM" name="Phorum" />
      <member cname="PK_LICENSE_ENUM_PHP" name="Php" />
      <member cname="PK_LICENSE_ENUM_PUBLIC_DOMAIN" name="PublicDomain" />
      <member cname="PK_LICENSE_ENUM_PYTHON" name="Python" />
      <member cname="PK_LICENSE_ENUM_QPL" name="Qpl" />
      <member cname="PK_LICENSE_ENUM_RPSL" name="Rpsl" />
      <member cname="PK_LICENSE_ENUM_RUBY" name="Ruby" />
      <member cname="PK_LICENSE_ENUM_SENDMAIL" name="Sendmail" />
      <member cname="PK_LICENSE_ENUM_SLEEPYCAT" name="Sleepycat" />
      <member cname="PK_LICENSE_ENUM_SLIB" name="Slib" />
      <member cname="PK_LICENSE_ENUM_SISSL" name="Sissl" />
      <member cname="PK_LICENSE_ENUM_SPL" name="Spl" />
      <member cname="PK_LICENSE_ENUM_TCL" name="Tcl" />
      <member cname="PK_LICENSE_ENUM_UCD" name="Ucd" />
      <member cname="PK_LICENSE_ENUM_VIM" name="Vim" />
      <member cname="PK_LICENSE_ENUM_VNLSL" name="Vnlsl" />
      <member cname="PK_LICENSE_ENUM_VSL" name="Vsl" />
      <member cname="PK_LICENSE_ENUM_W3C" name="W3c" />
      <member cname="PK_LICENSE_ENUM_WXWIDGETS" name="Wxwidgets" />
      <member cname="PK_LICENSE_ENUM_XINETD" name="Xinetd" />
      <member cname="PK_LICENSE_ENUM_ZEND" name="Zend" />
      <member cname="PK_LICENSE_ENUM_ZPLV1_DOT_0" name="Zplv1Dot0" />
      <member cname="PK_LICENSE_ENUM_ZPLV2_DOT_0" name="Zplv2Dot0" />
      <member cname="PK_LICENSE_ENUM_ZPLV2_DOT_1" name="Zplv2Dot1" />
      <member cname="PK_LICENSE_ENUM_ZLIB" name="Zlib" />
      <member cname="PK_LICENSE_ENUM_ZLIB_WITH_ACK" name="ZlibWithAck" />
      <member cname="PK_LICENSE_ENUM_CDL" name="Cdl" />
      <member cname="PK_LICENSE_ENUM_FBSDDL" name="Fbsddl" />
      <member cname="PK_LICENSE_ENUM_GFDL" name="Gfdl" />
      <member cname="PK_LICENSE_ENUM_IEEE" name="Ieee" />
      <member cname="PK_LICENSE_ENUM_OFSFDL" name="Ofsfdl" />
      <member cname="PK_LICENSE_ENUM_OPEN_PUBLICATION" name="OpenPublication" />
      <member cname="PK_LICENSE_ENUM_CC_BY" name="CcBy" />
      <member cname="PK_LICENSE_ENUM_CC_BY_SA" name="CcBySa" />
      <member cname="PK_LICENSE_ENUM_CC_BY_ND" name="CcByNd" />
      <member cname="PK_LICENSE_ENUM_DSL" name="Dsl" />
      <member cname="PK_LICENSE_ENUM_FREE_ART" name="FreeArt" />
      <member cname="PK_LICENSE_ENUM_OFL" name="Ofl" />
      <member cname="PK_LICENSE_ENUM_UTOPIA" name="Utopia" />
      <member cname="PK_LICENSE_ENUM_ARPHIC" name="Arphic" />
      <member cname="PK_LICENSE_ENUM_BAEKMUK" name="Baekmuk" />
      <member cname="PK_LICENSE_ENUM_BITSTREAM_VERA" name="BitstreamVera" />
      <member cname="PK_LICENSE_ENUM_LUCIDA" name="Lucida" />
      <member cname="PK_LICENSE_ENUM_MPLUS" name="Mplus" />
      <member cname="PK_LICENSE_ENUM_STIX" name="Stix" />
      <member cname="PK_LICENSE_ENUM_XANO" name="Xano" />
      <member cname="PK_LICENSE_ENUM_VOSTROM" name="Vostrom" />
      <member cname="PK_LICENSE_ENUM_XEROX" name="Xerox" />
      <member cname="PK_LICENSE_ENUM_RICEBSD" name="Ricebsd" />
      <member cname="PK_LICENSE_ENUM_QHULL" name="Qhull" />
      <member cname="PK_LICENSE_ENUM_UNKNOWN" name="Unknown" />
    </enum>
    <enum name="MessageEnum" cname="PkMessageEnum" type="enum">
      <member cname="PK_MESSAGE_ENUM_BROKEN_MIRROR" name="BrokenMirror" />
      <member cname="PK_MESSAGE_ENUM_CONNECTION_REFUSED" name="ConnectionRefused" />
      <member cname="PK_MESSAGE_ENUM_PARAMETER_INVALID" name="ParameterInvalid" />
      <member cname="PK_MESSAGE_ENUM_PRIORITY_INVALID" name="PriorityInvalid" />
      <member cname="PK_MESSAGE_ENUM_BACKEND_ERROR" name="BackendError" />
      <member cname="PK_MESSAGE_ENUM_DAEMON_ERROR" name="DaemonError" />
      <member cname="PK_MESSAGE_ENUM_CACHE_BEING_REBUILT" name="CacheBeingRebuilt" />
      <member cname="PK_MESSAGE_ENUM_UNTRUSTED_PACKAGE" name="UntrustedPackage" />
      <member cname="PK_MESSAGE_ENUM_NEWER_PACKAGE_EXISTS" name="NewerPackageExists" />
      <member cname="PK_MESSAGE_ENUM_COULD_NOT_FIND_PACKAGE" name="CouldNotFindPackage" />
      <member cname="PK_MESSAGE_ENUM_CONFIG_FILES_CHANGED" name="ConfigFilesChanged" />
      <member cname="PK_MESSAGE_ENUM_PACKAGE_ALREADY_INSTALLED" name="PackageAlreadyInstalled" />
      <member cname="PK_MESSAGE_ENUM_UNKNOWN" name="Unknown" />
    </enum>
    <enum name="NetworkEnum" cname="PkNetworkEnum" type="enum">
      <member cname="PK_NETWORK_ENUM_OFFLINE" name="Offline" />
      <member cname="PK_NETWORK_ENUM_ONLINE" name="Online" />
      <member cname="PK_NETWORK_ENUM_WIRED" name="Wired" />
      <member cname="PK_NETWORK_ENUM_WIFI" name="Wifi" />
      <member cname="PK_NETWORK_ENUM_MOBILE" name="Mobile" />
      <member cname="PK_NETWORK_ENUM_UNKNOWN" name="Unknown" />
    </enum>
    <enum name="ProvidesEnum" cname="PkProvidesEnum" type="enum">
      <member cname="PK_PROVIDES_ENUM_ANY" name="Any" />
      <member cname="PK_PROVIDES_ENUM_MODALIAS" name="Modalias" />
      <member cname="PK_PROVIDES_ENUM_CODEC" name="Codec" />
      <member cname="PK_PROVIDES_ENUM_MIMETYPE" name="Mimetype" />
      <member cname="PK_PROVIDES_ENUM_FONT" name="Font" />
      <member cname="PK_PROVIDES_ENUM_HARDWARE_DRIVER" name="HardwareDriver" />
      <member cname="PK_PROVIDES_ENUM_UNKNOWN" name="Unknown" />
    </enum>
    <enum name="RestartEnum" cname="PkRestartEnum" type="enum">
      <member cname="PK_RESTART_ENUM_NONE" name="None" />
      <member cname="PK_RESTART_ENUM_APPLICATION" name="Application" />
      <member cname="PK_RESTART_ENUM_SESSION" name="Session" />
      <member cname="PK_RESTART_ENUM_SYSTEM" name="System" />
      <member cname="PK_RESTART_ENUM_UNKNOWN" name="Unknown" />
    </enum>
    <enum name="RoleEnum" cname="PkRoleEnum" type="enum">
      <member cname="PK_ROLE_ENUM_CANCEL" name="Cancel" />
      <member cname="PK_ROLE_ENUM_GET_DEPENDS" name="GetDepends" />
      <member cname="PK_ROLE_ENUM_GET_DETAILS" name="GetDetails" />
      <member cname="PK_ROLE_ENUM_GET_FILES" name="GetFiles" />
      <member cname="PK_ROLE_ENUM_GET_PACKAGES" name="GetPackages" />
      <member cname="PK_ROLE_ENUM_GET_REPO_LIST" name="GetRepoList" />
      <member cname="PK_ROLE_ENUM_GET_REQUIRES" name="GetRequires" />
      <member cname="PK_ROLE_ENUM_GET_UPDATE_DETAIL" name="GetUpdateDetail" />
      <member cname="PK_ROLE_ENUM_GET_UPDATES" name="GetUpdates" />
      <member cname="PK_ROLE_ENUM_INSTALL_FILES" name="InstallFiles" />
      <member cname="PK_ROLE_ENUM_INSTALL_PACKAGES" name="InstallPackages" />
      <member cname="PK_ROLE_ENUM_INSTALL_SIGNATURE" name="InstallSignature" />
      <member cname="PK_ROLE_ENUM_REFRESH_CACHE" name="RefreshCache" />
      <member cname="PK_ROLE_ENUM_REMOVE_PACKAGES" name="RemovePackages" />
      <member cname="PK_ROLE_ENUM_REPO_ENABLE" name="RepoEnable" />
      <member cname="PK_ROLE_ENUM_REPO_SET_DATA" name="RepoSetData" />
      <member cname="PK_ROLE_ENUM_RESOLVE" name="Resolve" />
      <member cname="PK_ROLE_ENUM_ROLLBACK" name="Rollback" />
      <member cname="PK_ROLE_ENUM_SEARCH_DETAILS" name="SearchDetails" />
      <member cname="PK_ROLE_ENUM_SEARCH_FILE" name="SearchFile" />
      <member cname="PK_ROLE_ENUM_SEARCH_GROUP" name="SearchGroup" />
      <member cname="PK_ROLE_ENUM_SEARCH_NAME" name="SearchName" />
      <member cname="PK_ROLE_ENUM_UPDATE_PACKAGES" name="UpdatePackages" />
      <member cname="PK_ROLE_ENUM_UPDATE_SYSTEM" name="UpdateSystem" />
      <member cname="PK_ROLE_ENUM_WHAT_PROVIDES" name="WhatProvides" />
      <member cname="PK_ROLE_ENUM_ACCEPT_EULA" name="AcceptEula" />
      <member cname="PK_ROLE_ENUM_DOWNLOAD_PACKAGES" name="DownloadPackages" />
      <member cname="PK_ROLE_ENUM_GET_DISTRO_UPGRADES" name="GetDistroUpgrades" />
      <member cname="PK_ROLE_ENUM_GET_CATEGORIES" name="GetCategories" />
      <member cname="PK_ROLE_ENUM_GET_OLD_TRANSACTIONS" name="GetOldTransactions" />
      <member cname="PK_ROLE_ENUM_UNKNOWN" name="Unknown" />
    </enum>
    <enum name="ServicePackError" cname="PkServicePackError" gtype="pk_service_pack_error_get_type" type="enum">
      <member cname="PK_SERVICE_PACK_ERROR_FAILED_SETUP" name="FailedSetup" />
      <member cname="PK_SERVICE_PACK_ERROR_FAILED_DOWNLOAD" name="FailedDownload" />
      <member cname="PK_SERVICE_PACK_ERROR_FAILED_EXTRACTION" name="FailedExtraction" />
      <member cname="PK_SERVICE_PACK_ERROR_FAILED_CREATE" name="FailedCreate" />
      <member cname="PK_SERVICE_PACK_ERROR_NOTHING_TO_DO" name="NothingToDo" />
      <member cname="PK_SERVICE_PACK_ERROR_NOT_COMPATIBLE" name="NotCompatible" />
    </enum>
    <enum name="ServicePackStatus" cname="PkServicePackStatus" type="enum">
      <member cname="PK_SERVICE_PACK_STATUS_DOWNLOAD_PACKAGES" name="DownloadPackages" />
      <member cname="PK_SERVICE_PACK_STATUS_DOWNLOAD_DEPENDENCIES" name="DownloadDependencies" />
      <member cname="PK_SERVICE_PACK_STATUS_UNKNOWN" name="Unknown" />
    </enum>
    <enum name="SigTypeEnum" cname="PkSigTypeEnum" type="enum">
      <member cname="PK_SIGTYPE_ENUM_GPG" name="Gpg" />
      <member cname="PK_SIGTYPE_ENUM_UNKNOWN" name="Unknown" />
    </enum>
    <enum name="StatusEnum" cname="PkStatusEnum" type="enum">
      <member cname="PK_STATUS_ENUM_WAIT" name="Wait" />
      <member cname="PK_STATUS_ENUM_SETUP" name="Setup" />
      <member cname="PK_STATUS_ENUM_RUNNING" name="Running" />
      <member cname="PK_STATUS_ENUM_QUERY" name="Query" />
      <member cname="PK_STATUS_ENUM_INFO" name="Info" />
      <member cname="PK_STATUS_ENUM_REMOVE" name="Remove" />
      <member cname="PK_STATUS_ENUM_REFRESH_CACHE" name="RefreshCache" />
      <member cname="PK_STATUS_ENUM_DOWNLOAD" name="Download" />
      <member cname="PK_STATUS_ENUM_INSTALL" name="Install" />
      <member cname="PK_STATUS_ENUM_UPDATE" name="Update" />
      <member cname="PK_STATUS_ENUM_CLEANUP" name="Cleanup" />
      <member cname="PK_STATUS_ENUM_OBSOLETE" name="Obsolete" />
      <member cname="PK_STATUS_ENUM_DEP_RESOLVE" name="DepResolve" />
      <member cname="PK_STATUS_ENUM_SIG_CHECK" name="SigCheck" />
      <member cname="PK_STATUS_ENUM_ROLLBACK" name="Rollback" />
      <member cname="PK_STATUS_ENUM_TEST_COMMIT" name="TestCommit" />
      <member cname="PK_STATUS_ENUM_COMMIT" name="Commit" />
      <member cname="PK_STATUS_ENUM_REQUEST" name="Request" />
      <member cname="PK_STATUS_ENUM_FINISHED" name="Finished" />
      <member cname="PK_STATUS_ENUM_CANCEL" name="Cancel" />
      <member cname="PK_STATUS_ENUM_DOWNLOAD_REPOSITORY" name="DownloadRepository" />
      <member cname="PK_STATUS_ENUM_DOWNLOAD_PACKAGELIST" name="DownloadPackagelist" />
      <member cname="PK_STATUS_ENUM_DOWNLOAD_FILELIST" name="DownloadFilelist" />
      <member cname="PK_STATUS_ENUM_DOWNLOAD_CHANGELOG" name="DownloadChangelog" />
      <member cname="PK_STATUS_ENUM_DOWNLOAD_GROUP" name="DownloadGroup" />
      <member cname="PK_STATUS_ENUM_DOWNLOAD_UPDATEINFO" name="DownloadUpdateinfo" />
      <member cname="PK_STATUS_ENUM_REPACKAGING" name="Repackaging" />
      <member cname="PK_STATUS_ENUM_LOADING_CACHE" name="LoadingCache" />
      <member cname="PK_STATUS_ENUM_SCAN_APPLICATIONS" name="ScanApplications" />
      <member cname="PK_STATUS_ENUM_GENERATE_PACKAGE_LIST" name="GeneratePackageList" />
      <member cname="PK_STATUS_ENUM_WAITING_FOR_LOCK" name="WaitingForLock" />
      <member cname="PK_STATUS_ENUM_UNKNOWN" name="Unknown" />
    </enum>
    <enum name="UpdateStateEnum" cname="PkUpdateStateEnum" type="enum">
      <member cname="PK_UPDATE_STATE_ENUM_STABLE" name="Stable" />
      <member cname="PK_UPDATE_STATE_ENUM_UNSTABLE" name="Unstable" />
      <member cname="PK_UPDATE_STATE_ENUM_TESTING" name="Testing" />
      <member cname="PK_UPDATE_STATE_ENUM_UNKNOWN" name="Unknown" />
    </enum>
    <callback name="ObjListCompareFunc" cname="PkObjListCompareFunc">
      <return-type type="gint" />
      <parameters>
        <parameter type="gconstpointer" name="data1" />
        <parameter type="gconstpointer" name="data2" />
      </parameters>
    </callback>
    <callback name="ObjListCopyFunc" cname="PkObjListCopyFunc">
      <return-type type="gpointer" />
      <parameters>
        <parameter type="gconstpointer" name="data" />
      </parameters>
    </callback>
    <callback name="ObjListEqualFunc" cname="PkObjListEqualFunc">
      <return-type type="gboolean" />
      <parameters>
        <parameter type="gconstpointer" name="data1" />
        <parameter type="gconstpointer" name="data2" />
      </parameters>
    </callback>
    <callback name="ObjListFreeFunc" cname="PkObjListFreeFunc">
      <return-type type="void" />
      <parameters>
        <parameter type="gpointer" name="data" />
      </parameters>
    </callback>
    <callback name="ObjListFromStringFunc" cname="PkObjListFromStringFunc">
      <return-type type="gpointer" />
      <parameters>
        <parameter type="const-gchar*" name="data" />
      </parameters>
    </callback>
    <callback name="ObjListNewFunc" cname="PkObjListNewFunc">
      <return-type type="gpointer" />
    </callback>
    <callback name="ObjListToStringFunc" cname="PkObjListToStringFunc">
      <return-type type="gchar*" />
      <parameters>
        <parameter type="gconstpointer" name="data" />
      </parameters>
    </callback>
    <object name="Catalog" cname="PkCatalog" parent="GObject">
      <field name="Priv" cname="priv" type="PkCatalogPrivate*" />
      <signal name="Progress" cname="progress" when="LAST">
        <return-type type="void" />
        <parameters>
          <parameter name="inst" type="PkCatalog*" />
          <parameter name="p0" type="guint32" />
          <parameter name="p1" type="gchar*" />
        </parameters>
      </signal>
      <method name="Cancel" cname="pk_catalog_cancel">
        <return-type type="gboolean" />
      </method>
      <method name="GetType" cname="pk_catalog_get_type" shared="true">
        <return-type type="GType" />
      </method>
      <constructor cname="pk_catalog_new" />
      <method name="ProcessFiles" cname="pk_catalog_process_files">
        <return-type type="PkPackageList*" />
        <parameters>
          <parameter type="gchar**" name="filenames" />
        </parameters>
      </method>
    </object>
    <object name="Client" cname="PkClient" parent="GObject">
      <field name="Priv" cname="priv" type="PkClientPrivate*" />
      <signal name="StatusChanged" cname="status-changed" when="LAST" field_name="status_changed">
        <return-type type="void" />
        <parameters>
          <parameter type="PkClient*" name="client" />
          <parameter type="PkStatusEnum" name="status" />
        </parameters>
      </signal>
      <signal name="ProgressChanged" cname="progress-changed" when="LAST" field_name="progress_changed">
        <return-type type="void" />
        <parameters>
          <parameter type="PkClient*" name="client" />
          <parameter type="guint" name="percentage" />
          <parameter type="guint" name="subpercentage" />
          <parameter type="guint" name="elapsed" />
          <parameter type="guint" name="remaining" />
        </parameters>
      </signal>
      <signal name="Package" cname="package" when="LAST" manual="true" field_name="package">
        <return-type type="void" />
        <parameters>
          <parameter type="PkClient*" name="client" />
          <parameter type="PkPackageObj*" name="obj" />
        </parameters>
      </signal>
      <signal name="Transaction" cname="transaction" when="LAST" manual="true" field_name="transaction">
        <return-type type="void" />
        <parameters>
          <parameter type="PkClient*" name="client" />
          <parameter type="PkTransactionObj*" name="obj" />
        </parameters>
      </signal>
      <signal name="DistroUpgrade" cname="distro-upgrade" when="LAST" manual="true" field_name="distro_upgrade">
        <return-type type="void" />
        <parameters>
          <parameter type="PkClient*" name="client" />
          <parameter type="PkUpdateStateEnum" name="type" />
          <parameter type="const-gchar*" name="name" />
          <parameter type="const-gchar*" name="summary" />
        </parameters>
      </signal>
      <signal name="UpdateDetail" cname="update-detail" when="LAST" manual="true" field_name="update_detail">
        <return-type type="void" />
        <parameters>
          <parameter type="PkClient*" name="client" />
          <parameter type="PkUpdateDetailObj*" name="update_detail" />
        </parameters>
      </signal>
      <signal name="Details" cname="details" when="LAST" manual="true" field_name="details">
        <return-type type="void" />
        <parameters>
          <parameter type="PkClient*" name="client" />
          <parameter type="PkDetailsObj*" name="package_detail" />
        </parameters>
      </signal>
      <signal name="Files" cname="files" when="LAST" field_name="files">
        <return-type type="void" />
        <parameters>
          <parameter type="PkClient*" name="client" />
          <parameter type="const-gchar*" name="package_id" />
          <parameter type="const-gchar*" name="filelist" />
        </parameters>
      </signal>
      <signal name="RepoSignatureRequired" cname="repo-signature-required" when="LAST" field_name="repo_signature_required">
        <return-type type="void" />
        <parameters>
          <parameter type="PkClient*" name="client" />
          <parameter type="const-gchar*" name="package_id" />
          <parameter type="const-gchar*" name="repository_name" />
          <parameter type="const-gchar*" name="key_url" />
          <parameter type="const-gchar*" name="key_userid" />
          <parameter type="const-gchar*" name="key_id" />
          <parameter type="const-gchar*" name="key_fingerprint" />
          <parameter type="const-gchar*" name="key_timestamp" />
          <parameter type="PkSigTypeEnum" name="type" />
        </parameters>
      </signal>
      <signal name="EulaRequired" cname="eula-required" when="LAST" field_name="eula_required">
        <return-type type="void" />
        <parameters>
          <parameter type="PkClient*" name="client" />
          <parameter type="const-gchar*" name="eula_id" />
          <parameter type="const-gchar*" name="package_id" />
          <parameter type="const-gchar*" name="vendor_name" />
          <parameter type="const-gchar*" name="license_agreement" />
        </parameters>
      </signal>
      <signal name="RepoDetail" cname="repo-detail" when="LAST" field_name="repo_detail">
        <return-type type="void" />
        <parameters>
          <parameter type="PkClient*" name="client" />
          <parameter type="const-gchar*" name="repo_id" />
          <parameter type="const-gchar*" name="description" />
          <parameter type="gboolean" name="enabled" />
        </parameters>
      </signal>
      <signal name="ErrorCode" cname="error-code" when="LAST" field_name="error_code">
        <return-type type="void" />
        <parameters>
          <parameter type="PkClient*" name="client" />
          <parameter type="PkErrorCodeEnum" name="code" />
          <parameter type="const-gchar*" name="details" />
        </parameters>
      </signal>
      <signal name="RequireRestart" cname="require-restart" when="LAST" manual="true" field_name="require_restart">
        <return-type type="void" />
        <parameters>
          <parameter type="PkClient*" name="client" />
          <parameter type="PkRestartEnum" name="restart" />
          <parameter type="PkPackageId*" name="id" />
        </parameters>
      </signal>
      <signal name="Message" cname="message" when="LAST" field_name="message">
        <return-type type="void" />
        <parameters>
          <parameter type="PkClient*" name="client" />
          <parameter type="PkMessageEnum" name="message" />
          <parameter type="const-gchar*" name="details" />
        </parameters>
      </signal>
      <signal name="AllowCancel" cname="allow-cancel" when="LAST" field_name="allow_cancel">
        <return-type type="void" />
        <parameters>
          <parameter type="PkClient*" name="client" />
          <parameter type="gboolean" name="allow_cancel" />
        </parameters>
      </signal>
      <signal name="CallerActiveChanged" cname="caller-active-changed" when="LAST" field_name="caller_active_changed">
        <return-type type="void" />
        <parameters>
          <parameter type="PkClient*" name="client" />
          <parameter type="gboolean" name="is_active" />
        </parameters>
      </signal>
      <signal name="Category" cname="category" when="LAST" manual="true" field_name="category">
        <return-type type="void" />
        <parameters>
          <parameter type="PkClient*" name="client" />
          <parameter type="PkCategoryObj*" name="obj" />
        </parameters>
      </signal>
      <signal name="Destroy" cname="destroy" when="LAST" field_name="finished">
        <return-type type="void" />
        <parameters>
          <parameter type="PkClient*" name="client" />
          <parameter type="PkExitEnum" name="exit" />
          <parameter type="guint" name="runtime" />
        </parameters>
      </signal>
      <method name="AcceptEula" cname="pk_client_accept_eula">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="const-gchar*" name="eula_id" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="Cancel" cname="pk_client_cancel">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="DownloadPackages" cname="pk_client_download_packages">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="gchar**" name="package_ids" null_term_array="1" />
          <parameter type="const-gchar*" name="directory" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="ErrorQuark" cname="pk_client_error_quark" shared="true">
        <return-type type="GQuark" />
      </method>
      <method name="GetAllowCancel" cname="pk_client_get_allow_cancel">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="gboolean*" name="allow_cancel" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="GetCachedObjects" cname="pk_client_get_cached_objects">
        <return-type type="PkObjList*" />
      </method>
      <method name="GetCategories" cname="pk_client_get_categories">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="GetDepends" cname="pk_client_get_depends">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="PkBitfield" name="filters" />
          <parameter type="gchar**" name="package_ids" />
          <parameter type="gboolean" name="recursive" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="GetDetails" cname="pk_client_get_details">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="gchar**" name="package_ids" null_term_array="1" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="GetDistroUpgrades" cname="pk_client_get_distro_upgrades">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="GetFiles" cname="pk_client_get_files">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="gchar**" name="package_ids" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="GetOldTransactions" cname="pk_client_get_old_transactions">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="guint" name="number" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="GetPackage" cname="pk_client_get_package">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="gchar**" name="package" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="GetPackageList" cname="pk_client_get_package_list">
        <return-type type="PkPackageList*" />
      </method>
      <method name="GetPackages" cname="pk_client_get_packages">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="PkBitfield" name="filters" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="GetProgress" cname="pk_client_get_progress">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="guint*" name="percentage" />
          <parameter type="guint*" name="subpercentage" />
          <parameter type="guint*" name="elapsed" />
          <parameter type="guint*" name="remaining" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="GetRepoList" cname="pk_client_get_repo_list">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="PkBitfield" name="filters" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method cname="pk_client_get_require_restart" name="GetRequireRestartStatus">
        <return-type type="PkRestartEnum" />
      </method>
      <method name="GetRequireRestartList" cname="pk_client_get_require_restart_list">
        <return-type type="const-GPtrArray*" />
      </method>
      <method name="GetRequires" cname="pk_client_get_requires">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="PkBitfield" name="filters" />
          <parameter type="gchar**" name="package_ids" null_term_array="1" />
          <parameter type="gboolean" name="recursive" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="GetRole" cname="pk_client_get_role">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="PkRoleEnum*" name="role" />
          <parameter type="gchar**" name="text" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="GetStatus" cname="pk_client_get_status">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="PkStatusEnum*" name="status" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="GetTid" cname="pk_client_get_tid" hidden="true">
        <return-type type="gchar*" />
      </method>
      <method name="GetType" cname="pk_client_get_type" shared="true">
        <return-type type="GType" />
      </method>
      <method name="GetUpdateDetail" cname="pk_client_get_update_detail">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="gchar**" name="package_ids" null_term_array="1" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="GetUpdates" cname="pk_client_get_updates">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="PkBitfield" name="filters" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="GetUseBuffer" cname="pk_client_get_use_buffer" hidden="true">
        <return-type type="gboolean" />
      </method>
      <method name="InstallFile" cname="pk_client_install_file">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="gboolean" name="only_trusted" />
          <parameter type="const-gchar*" name="file_rel" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="InstallFiles" cname="pk_client_install_files">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="gboolean" name="only_trusted" />
          <parameter type="gchar**" name="files_rel" null_term_array="1" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="InstallPackages" cname="pk_client_install_packages">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="gchar**" name="package_ids" null_term_array="1" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="InstallSignature" cname="pk_client_install_signature">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="PkSigTypeEnum" name="type" />
          <parameter type="const-gchar*" name="key_id" />
          <parameter type="const-gchar*" name="package_id" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="IsCallerActive" cname="pk_client_is_caller_active">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="gboolean*" name="is_active" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <constructor cname="pk_client_new" />
      <method name="RefreshCache" cname="pk_client_refresh_cache">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="gboolean" name="force" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="RemovePackages" cname="pk_client_remove_packages">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="gchar**" name="package_ids" />
          <parameter type="gboolean" name="allow_deps" />
          <parameter type="gboolean" name="autoremove" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="RepoEnable" cname="pk_client_repo_enable">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="const-gchar*" name="repo_id" />
          <parameter type="gboolean" name="enabled" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="RepoSetData" cname="pk_client_repo_set_data">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="const-gchar*" name="repo_id" />
          <parameter type="const-gchar*" name="parameter" />
          <parameter type="const-gchar*" name="value" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="Requeue" cname="pk_client_requeue">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="Reset" cname="pk_client_reset">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="Resolve" cname="pk_client_resolve">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="PkBitfield" name="filters" />
          <parameter type="gchar**" name="packages" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="Rollback" cname="pk_client_rollback">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="const-gchar*" name="transaction_id" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="SearchDetails" cname="pk_client_search_details">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="PkBitfield" name="filters" />
          <parameter type="const-gchar*" name="search" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="SearchFile" cname="pk_client_search_file">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="PkBitfield" name="filters" />
          <parameter type="const-gchar*" name="search" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="SearchGroup" cname="pk_client_search_group">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="PkBitfield" name="filters" />
          <parameter type="const-gchar*" name="search" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="SearchName" cname="pk_client_search_name">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="PkBitfield" name="filters" />
          <parameter type="const-gchar*" name="search" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="SetLocale" cname="pk_client_set_locale">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="const-gchar*" name="code" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="SetSynchronous" cname="pk_client_set_synchronous">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="gboolean" name="synchronous" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="SetTid" cname="pk_client_set_tid" hidden="true">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="const-gchar*" name="tid" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="SetTimeout" cname="pk_client_set_timeout">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="gint" name="timeout" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="SetUseBuffer" cname="pk_client_set_use_buffer" hidden="true">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="gboolean" name="use_buffer" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="UpdatePackages" cname="pk_client_update_packages">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="gchar**" name="package_ids" null_term_array="1" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="UpdateSystem" cname="pk_client_update_system">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="WhatProvides" cname="pk_client_what_provides">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="PkBitfield" name="filters" />
          <parameter type="PkProvidesEnum" name="provides" />
          <parameter type="const-gchar*" name="search" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <signal name="Finished" cname="finished" when="LAST" manual="true" field_name="finished">
        <return-type type="void" />
        <parameters>
          <parameter type="PkClient*" name="client" />
          <parameter type="PkExitEnum" name="exit" />
          <parameter type="guint" name="runtime" />
        </parameters>
      </signal>
    </object>
    <object name="Connection" cname="PkConnection" parent="GObject">
      <field name="Priv" cname="priv" type="PkConnectionPrivate*" />
      <signal name="ConnectionChanged" cname="connection-changed" when="LAST" field_name="connection_changed">
        <return-type type="void" />
        <parameters>
          <parameter type="PkConnection*" name="connection" />
          <parameter type="gboolean" name="connected" />
        </parameters>
      </signal>
      <method name="GetType" cname="pk_connection_get_type" shared="true">
        <return-type type="GType" />
      </method>
      <constructor cname="pk_connection_new" />
      <method name="Valid" cname="pk_connection_valid">
        <return-type type="gboolean" />
      </method>
    </object>
    <object name="Control" cname="PkControl" parent="GObject">
      <field name="Priv" cname="priv" type="PkControlPrivate*" />
      <signal name="UpdatesChanged" cname="updates-changed" when="LAST" field_name="updates_changed">
        <return-type type="void" />
        <parameters>
          <parameter type="PkControl*" name="control" />
        </parameters>
      </signal>
      <signal name="RepoListChanged" cname="repo-list-changed" when="LAST" field_name="repo_list_changed">
        <return-type type="void" />
        <parameters>
          <parameter type="PkControl*" name="control" />
        </parameters>
      </signal>
      <signal name="NetworkStateChanged" cname="network-state-changed" when="LAST" field_name="network_state_changed">
        <return-type type="void" />
        <parameters>
          <parameter type="PkControl*" name="control" />
        </parameters>
      </signal>
      <signal name="RestartSchedule" cname="restart-schedule" when="LAST" field_name="restart_schedule">
        <return-type type="void" />
        <parameters>
          <parameter type="PkControl*" name="control" />
        </parameters>
      </signal>
      <signal name="TransactionListChanged" cname="transaction-list-changed" when="LAST" field_name="transaction_list_changed">
        <return-type type="void" />
        <parameters>
          <parameter type="PkControl*" name="control" />
        </parameters>
      </signal>
      <signal name="Locked" cname="locked" when="LAST" field_name="locked">
        <return-type type="void" />
        <parameters>
          <parameter type="PkControl*" name="control" />
          <parameter type="gboolean" name="is_locked" />
        </parameters>
      </signal>
      <method name="AllocateTransactionId" cname="pk_control_allocate_transaction_id">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="gchar**" name="tid" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="ErrorQuark" cname="pk_control_error_quark" shared="true">
        <return-type type="GQuark" />
      </method>
      <method name="GetActions" cname="pk_control_get_actions">
        <return-type type="PkBitfield" />
        <parameters>
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="GetBackendDetail" cname="pk_control_get_backend_detail">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="gchar**" name="name" />
          <parameter type="gchar**" name="author" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="GetFilters" cname="pk_control_get_filters">
        <return-type type="PkBitfield" />
        <parameters>
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="GetGroups" cname="pk_control_get_groups">
        <return-type type="PkBitfield" />
        <parameters>
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="GetMimeTypes" cname="pk_control_get_mime_types">
        <return-type type="gchar**" />
        <parameters>
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="GetNetworkState" cname="pk_control_get_network_state">
        <return-type type="PkNetworkEnum" />
        <parameters>
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="GetTimeSinceAction" cname="pk_control_get_time_since_action">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="PkRoleEnum" name="role" />
          <parameter type="guint*" name="seconds" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="GetType" cname="pk_control_get_type" shared="true">
        <return-type type="GType" />
      </method>
      <constructor cname="pk_control_new" />
      <method name="SetProxy" cname="pk_control_set_proxy">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="const-gchar*" name="proxy_http" />
          <parameter type="const-gchar*" name="proxy_ftp" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="TransactionListGet" cname="pk_control_transaction_list_get">
        <return-type type="const-gchar**" />
      </method>
      <method name="TransactionListPrint" cname="pk_control_transaction_list_print">
        <return-type type="gboolean" />
      </method>
    </object>
    <object name="Desktop" cname="PkDesktop" parent="GObject">
      <field name="Priv" cname="priv" type="PkDesktopPrivate*" />
      <method name="GetFilesForPackage" cname="pk_desktop_get_files_for_package">
        <return-type type="GPtrArray*" />
        <parameters>
          <parameter type="const-gchar*" name="package" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="GetPackageForFile" cname="pk_desktop_get_package_for_file">
        <return-type type="gchar*" />
        <parameters>
          <parameter type="const-gchar*" name="filename" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="GetShownForPackage" cname="pk_desktop_get_shown_for_package">
        <return-type type="GPtrArray*" />
        <parameters>
          <parameter type="const-gchar*" name="package" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="GetType" cname="pk_desktop_get_type" shared="true">
        <return-type type="GType" />
      </method>
      <constructor cname="pk_desktop_new" />
      <method name="OpenDatabase" cname="pk_desktop_open_database">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
    </object>
    <object name="ObjList" cname="PkObjList" parent="GObject">
      <field name="Priv" cname="priv" type="PkObjListPrivate*" />
      <field name="Len" cname="len" type="guint" />
      <method name="Add" cname="pk_obj_list_add">
        <return-type type="void" />
        <parameters>
          <parameter type="gconstpointer" name="data" />
        </parameters>
      </method>
      <method name="AddArray" cname="pk_obj_list_add_array">
        <return-type type="void" />
        <parameters>
          <parameter type="const-GPtrArray*" name="data" />
        </parameters>
      </method>
      <method name="AddList" cname="pk_obj_list_add_list">
        <return-type type="void" />
        <parameters>
          <parameter type="const-PkObjList*" name="data" />
        </parameters>
      </method>
      <method name="AddStrv" cname="pk_obj_list_add_strv">
        <return-type type="void" />
        <parameters>
          <parameter type="gpointer**" name="data" />
        </parameters>
      </method>
      <method name="Clear" cname="pk_obj_list_clear">
        <return-type type="void" />
      </method>
      <method name="Exists" cname="pk_obj_list_exists">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="gconstpointer" name="data" />
        </parameters>
      </method>
      <method name="FromFile" cname="pk_obj_list_from_file">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="const-gchar*" name="filename" />
        </parameters>
      </method>
      <method name="GetArray" cname="pk_obj_list_get_array">
        <return-type type="const-GPtrArray*" />
      </method>
      <method name="GetType" cname="pk_obj_list_get_type" shared="true">
        <return-type type="GType" />
      </method>
      <method name="Index" cname="pk_obj_list_index">
        <return-type type="gconst-pointer" />
        <parameters>
          <parameter type="guint" name="index" />
        </parameters>
      </method>
      <constructor cname="pk_obj_list_new" />
      <method name="Print" cname="pk_obj_list_print">
        <return-type type="void" />
      </method>
      <method name="Remove" cname="pk_obj_list_remove">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="gconstpointer" name="data" />
        </parameters>
      </method>
      <method name="RemoveDuplicate" cname="pk_obj_list_remove_duplicate">
        <return-type type="void" />
      </method>
      <method name="RemoveIndex" cname="pk_obj_list_remove_index">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="guint" name="index" />
        </parameters>
      </method>
      <method name="RemoveList" cname="pk_obj_list_remove_list">
        <return-type type="void" />
        <parameters>
          <parameter type="const-PkObjList*" name="data" />
        </parameters>
      </method>
      <method name="SetCompare" cname="pk_obj_list_set_compare">
        <return-type type="void" />
        <parameters>
          <parameter type="PkObjListCompareFunc" name="func" />
        </parameters>
      </method>
      <method name="SetCopy" cname="pk_obj_list_set_copy">
        <return-type type="void" />
        <parameters>
          <parameter type="PkObjListCopyFunc" name="func" />
        </parameters>
      </method>
      <method name="SetEqual" cname="pk_obj_list_set_equal">
        <return-type type="void" />
        <parameters>
          <parameter type="PkObjListEqualFunc" name="func" />
        </parameters>
      </method>
      <method name="SetFree" cname="pk_obj_list_set_free">
        <return-type type="void" />
        <parameters>
          <parameter type="PkObjListFreeFunc" name="func" />
        </parameters>
      </method>
      <method name="SetFromString" cname="pk_obj_list_set_from_string">
        <return-type type="void" />
        <parameters>
          <parameter type="PkObjListFromStringFunc" name="func" />
        </parameters>
      </method>
      <method name="SetNew" cname="pk_obj_list_set_new">
        <return-type type="void" />
        <parameters>
          <parameter type="PkObjListNewFunc" name="func" />
        </parameters>
      </method>
      <method cname="pk_obj_list_set_to_string" name="SetToStringFunc">
        <return-type type="void" />
        <parameters>
          <parameter type="PkObjListToStringFunc" name="func" />
        </parameters>
      </method>
      <method name="Sort" cname="pk_obj_list_sort">
        <return-type type="void" />
        <parameters>
          <parameter type="GCompareFunc" name="sort_func" />
        </parameters>
      </method>
      <method name="ToFile" cname="pk_obj_list_to_file">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="const-gchar*" name="filename" />
        </parameters>
      </method>
      <method name="ToString" cname="pk_obj_list_to_string">
        <return-type type="gchar*" />
      </method>
    </object>
    <object name="PackageList" cname="PkPackageList" parent="PkObjList">
      <field name="Priv" cname="priv" type="PkPackageListPrivate*" />
      <method name="Add" cname="pk_package_list_add">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="PkInfoEnum" name="info" />
          <parameter type="const-PkPackageId*" name="ident" />
          <parameter type="const-gchar*" name="summary" />
        </parameters>
      </method>
      <method name="Contains" cname="pk_package_list_contains">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="const-gchar*" name="package_id" />
        </parameters>
      </method>
      <method name="GetObj" cname="pk_package_list_get_obj" hidden="1">
        <return-type type="const-PkPackageObj*" />
        <parameters>
          <parameter type="guint" name="item" />
        </parameters>
      </method>
      <method name="GetSize" cname="pk_package_list_get_size">
        <return-type type="guint" />
      </method>
      <method name="GetType" cname="pk_package_list_get_type" shared="true">
        <return-type type="GType" />
      </method>
      <constructor cname="pk_package_list_new" />
      <method name="Remove" cname="pk_package_list_remove">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="const-gchar*" name="package_id" />
        </parameters>
      </method>
      <method name="SetFuzzyArch" cname="pk_package_list_set_fuzzy_arch">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="gboolean" name="fuzzy_arch" />
        </parameters>
      </method>
      <method name="Sort" cname="pk_package_list_sort">
        <return-type type="gboolean" />
      </method>
      <method name="SortInfo" cname="pk_package_list_sort_info">
        <return-type type="gboolean" />
      </method>
      <method name="SortSummary" cname="pk_package_list_sort_summary">
        <return-type type="gboolean" />
      </method>
      <method cname="pk_package_list_to_strv" name="ToStringArray">
        <return-type type="gchar**" null_term_array="1" />
      </method>
    </object>
    <object name="ServicePack" cname="PkServicePack" parent="GObject">
      <field name="Priv" cname="priv" type="PkServicePackPrivate*" />
      <signal name="Package" cname="package" when="LAST" manual="true" field_name="package">
        <return-type type="void" />
        <parameters>
          <parameter type="PkServicePack*" name="pack" />
          <parameter type="const-PkPackageObj*" name="obj" />
        </parameters>
      </signal>
      <signal name="Percentage" cname="percentage" when="LAST" field_name="percentage">
        <return-type type="void" />
        <parameters>
          <parameter type="PkServicePack*" name="pack" />
          <parameter type="guint" name="percentage" />
        </parameters>
      </signal>
      <signal name="Status" cname="status" when="LAST" field_name="status">
        <return-type type="void" />
        <parameters>
          <parameter type="PkServicePack*" name="pack" />
          <parameter type="PkServicePackStatus" name="status" />
        </parameters>
      </signal>
      <method name="Cancel" cname="pk_service_pack_cancel">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="CheckValid" cname="pk_service_pack_check_valid">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="CreateForPackageId" cname="pk_service_pack_create_for_package_id">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="const-gchar*" name="package_id" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="CreateForPackageIds" cname="pk_service_pack_create_for_package_ids">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="gchar**" name="package_ids" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="CreateForUpdates" cname="pk_service_pack_create_for_updates">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="ErrorQuark" cname="pk_service_pack_error_quark" shared="true">
        <return-type type="GQuark" />
      </method>
      <method name="GetType" cname="pk_service_pack_get_type" shared="true">
        <return-type type="GType" />
      </method>
      <constructor cname="pk_service_pack_new" />
      <method name="SetExcludeList" cname="pk_service_pack_set_exclude_list">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="PkPackageList*" name="list" />
        </parameters>
      </method>
      <method name="SetFilename" cname="pk_service_pack_set_filename">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="const-gchar*" name="filename" />
        </parameters>
      </method>
      <method name="SetTempDirectory" cname="pk_service_pack_set_temp_directory">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="const-gchar*" name="directory" />
        </parameters>
      </method>
    </object>
    <object name="TaskList" cname="PkTaskList" parent="GObject">
      <field name="Priv" cname="priv" type="PkTaskListPrivate*" />
      <signal name="Changed" cname="changed" when="LAST" field_name="changed">
        <return-type type="void" />
        <parameters>
          <parameter type="PkTaskList*" name="tlist" />
        </parameters>
      </signal>
      <signal name="StatusChanged" cname="status-changed" when="LAST" field_name="status_changed">
        <return-type type="void" />
        <parameters>
          <parameter type="PkTaskList*" name="tlist" />
        </parameters>
      </signal>
      <signal name="Message" cname="message" when="LAST" manual="true" field_name="message">
        <return-type type="void" />
        <parameters>
          <parameter type="PkTaskList*" name="tlist" />
          <parameter type="PkClient*" name="client" />
          <parameter type="PkMessageEnum" name="message" />
          <parameter type="const-gchar*" name="details" />
        </parameters>
      </signal>
      <signal name="Finished" cname="finished" when="LAST" manual="true" field_name="finished">
        <return-type type="void" />
        <parameters>
          <parameter type="PkTaskList*" name="tlist" />
          <parameter type="PkClient*" name="client" />
          <parameter type="PkExitEnum" name="exit" />
          <parameter type="guint" name="runtime" />
        </parameters>
      </signal>
      <signal name="ErrorCode" cname="error-code" when="LAST" manual="true" field_name="error_code">
        <return-type type="void" />
        <parameters>
          <parameter type="PkTaskList*" name="tlist" />
          <parameter type="PkClient*" name="client" />
          <parameter type="PkErrorCodeEnum" name="code" />
          <parameter type="const-gchar*" name="details" />
        </parameters>
      </signal>
      <method name="ContainsRole" cname="pk_task_list_contains_role">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="PkRoleEnum" name="role" />
        </parameters>
      </method>
      <method name="Free" cname="pk_task_list_free">
        <return-type type="gboolean" />
      </method>
      <method name="GetItem" cname="pk_task_list_get_item">
        <return-type type="PkTaskListItem*" />
        <parameters>
          <parameter type="guint" name="item" />
        </parameters>
      </method>
      <method name="GetSize" cname="pk_task_list_get_size">
        <return-type type="guint" />
      </method>
      <method name="GetType" cname="pk_task_list_get_type" shared="true">
        <return-type type="GType" />
      </method>
      <constructor cname="pk_task_list_new" />
      <method name="Print" cname="pk_task_list_print">
        <return-type type="gboolean" />
      </method>
      <method name="Refresh" cname="pk_task_list_refresh">
        <return-type type="gboolean" />
      </method>
    </object>
    <alias name="Bitfield" cname="PkBitfield" type="guint64" />
    <struct name="CategoryObj" cname="PkCategoryObj" opaque="true">
      <field name="ParentId" cname="parent_id" type="gchar*" access="public" writeable="true" />
      <field name="CatId" cname="cat_id" type="gchar*" access="public" writeable="true" />
      <field name="Name" cname="name" type="gchar*" access="public" writeable="true" />
      <field name="Summary" cname="summary" type="gchar*" access="public" writeable="true" />
      <field name="Icon" cname="icon" type="gchar*" access="public" writeable="true" />
      <method name="Copy" cname="pk_category_obj_copy">
        <return-type type="PkCategoryObj*" owned="true" />
      </method>
      <method name="Free" cname="pk_category_obj_free">
        <return-type type="gboolean" />
      </method>
      <constructor cname="pk_category_obj_new" />
      <constructor cname="pk_category_obj_new_from_data">
        <parameters>
          <parameter type="const-gchar*" name="parent_id" />
          <parameter type="const-gchar*" name="cat_id" />
          <parameter type="const-gchar*" name="name" />
          <parameter type="const-gchar*" name="summary" />
          <parameter type="const-gchar*" name="icon" />
        </parameters>
      </constructor>
    </struct>
    <struct name="DetailsObj" cname="PkDetailsObj" opaque="true">
      <field name="Id" cname="id" type="PkPackageId*" access="public" writeable="true" />
      <field name="License" cname="license" type="gchar*" access="public" writeable="true" />
      <field name="Group" cname="group" type="PkGroupEnum" access="public" writeable="true" />
      <field name="Description" cname="description" type="gchar*" access="public" writeable="true" />
      <field name="Url" cname="url" type="gchar*" access="public" writeable="true" />
      <field name="Size" cname="size" type="guint64" access="public" writeable="true" />
      <method name="Copy" cname="pk_details_obj_copy">
        <return-type type="PkDetailsObj*" owned="true" />
      </method>
      <method name="Free" cname="pk_details_obj_free">
        <return-type type="gboolean" />
      </method>
      <constructor cname="pk_details_obj_new" />
      <constructor cname="pk_details_obj_new_from_data">
        <parameters>
          <parameter type="const-PkPackageId*" name="id" />
          <parameter type="const-gchar*" name="license" />
          <parameter type="PkGroupEnum" name="group" />
          <parameter type="const-gchar*" name="description" />
          <parameter type="const-gchar*" name="url" />
          <parameter type="guint64" name="size" />
        </parameters>
      </constructor>
    </struct>
    <struct name="DistroUpgradeObj" cname="PkDistroUpgradeObj" opaque="true">
      <field name="State" cname="state" type="PkUpdateStateEnum" access="public" writeable="true" />
      <field name="Name" cname="name" type="gchar*" access="public" writeable="true" />
      <field name="Summary" cname="summary" type="gchar*" access="public" writeable="true" />
      <method name="Copy" cname="pk_distro_upgrade_obj_copy">
        <return-type type="PkDistroUpgradeObj*" owned="true" />
      </method>
      <method name="Free" cname="pk_distro_upgrade_obj_free">
        <return-type type="gboolean" />
      </method>
      <constructor cname="pk_distro_upgrade_obj_new" />
      <constructor cname="pk_distro_upgrade_obj_new_from_data">
        <parameters>
          <parameter type="PkUpdateStateEnum" name="state" />
          <parameter type="const-gchar*" name="name" />
          <parameter type="const-gchar*" name="summary" />
        </parameters>
      </constructor>
    </struct>
    <struct name="EnumMatch" cname="PkEnumMatch">
      <field name="Value" cname="value" type="guint" />
      <field name="String" cname="string" type="const-gchar*" />
    </struct>
    <struct name="PackageId" cname="PkPackageId" opaque="true">
      <field name="Name" cname="name" type="gchar*" access="public" writeable="true" />
      <field name="Version" cname="version" type="gchar*" access="public" writeable="true" />
      <field name="Arch" cname="arch" type="gchar*" access="public" writeable="true" />
      <field name="Data" cname="data" type="gchar*" access="public" writeable="true" />
      <method name="Build" cname="pk_package_id_build" shared="true">
        <return-type type="gchar*" />
        <parameters>
          <parameter type="const-gchar*" name="name" />
          <parameter type="const-gchar*" name="version" />
          <parameter type="const-gchar*" name="arch" />
          <parameter type="const-gchar*" name="data" />
        </parameters>
      </method>
      <method name="Check" cname="pk_package_id_check" shared="true">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="const-gchar*" name="package_id" />
        </parameters>
      </method>
      <method name="Copy" cname="pk_package_id_copy">
        <return-type type="PkPackageId*" owned="true" />
      </method>
      <method name="Equal" cname="pk_package_id_equal">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="const-PkPackageId*" name="id2" />
        </parameters>
      </method>
      <method name="EqualFuzzyArch" cname="pk_package_id_equal_fuzzy_arch">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="const-PkPackageId*" name="id2" />
        </parameters>
      </method>
      <method name="EqualStrings" cname="pk_package_id_equal_strings" shared="true">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="const-gchar*" name="pid1" />
          <parameter type="const-gchar*" name="pid2" />
        </parameters>
      </method>
      <method name="Free" cname="pk_package_id_free">
        <return-type type="gboolean" />
      </method>
      <method name="GetArch" cname="pk_package_id_get_arch">
        <return-type type="const-gchar*" />
      </method>
      <method name="GetData" cname="pk_package_id_get_data">
        <return-type type="const-gchar*" />
      </method>
      <method name="GetName" cname="pk_package_id_get_name">
        <return-type type="const-gchar*" />
      </method>
      <method name="GetVersion" cname="pk_package_id_get_version">
        <return-type type="const-gchar*" />
      </method>
      <constructor cname="pk_package_id_new" />
      <constructor cname="pk_package_id_new_from_list">
        <parameters>
          <parameter type="const-gchar*" name="name" />
          <parameter type="const-gchar*" name="version" />
          <parameter type="const-gchar*" name="arch" />
          <parameter type="const-gchar*" name="data" />
        </parameters>
      </constructor>
      <constructor cname="pk_package_id_new_from_string">
        <parameters>
          <parameter type="const-gchar*" name="package_id" />
        </parameters>
      </constructor>
      <method name="ToString" cname="pk_package_id_to_string">
        <return-type type="gchar*" />
      </method>
    </struct>
    <struct name="PackageObj" cname="PkPackageObj" opaque="true">
      <field name="Info" cname="info" type="PkInfoEnum" access="public" writeable="true" />
      <field name="Id" cname="id" type="PkPackageId*" access="public" writeable="true" />
      <field name="Summary" cname="summary" type="gchar*" access="public" writeable="true" />
      <method name="Copy" cname="pk_package_obj_copy">
        <return-type type="PkPackageObj*" owned="true" />
      </method>
      <method name="Equal" cname="pk_package_obj_equal">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="const-PkPackageObj*" name="obj2" />
        </parameters>
      </method>
      <method name="EqualFuzzyArch" cname="pk_package_obj_equal_fuzzy_arch">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="const-PkPackageObj*" name="obj2" />
        </parameters>
      </method>
      <method name="Free" cname="pk_package_obj_free">
        <return-type type="gboolean" />
      </method>
      <method name="FromString" cname="pk_package_obj_from_string" shared="true">
        <return-type type="PkPackageObj*" />
        <parameters>
          <parameter type="const-gchar*" name="text" />
        </parameters>
      </method>
      <constructor cname="pk_package_obj_new">
        <parameters>
          <parameter type="PkInfoEnum" name="info" />
          <parameter type="const-PkPackageId*" name="id" />
          <parameter type="const-gchar*" name="summary" />
        </parameters>
      </constructor>
      <method name="ToString" cname="pk_package_obj_to_string">
        <return-type type="gchar*" />
      </method>
    </struct>
    <struct name="TaskListItem" cname="PkTaskListItem">
      <field name="Tid" cname="tid" type="gchar*" />
      <field name="Status" cname="status" type="PkStatusEnum" />
      <field name="Role" cname="role" type="PkRoleEnum" />
      <field name="Text" cname="text" type="gchar*" />
      <field name="Monitor" cname="monitor" type="PkClient*" />
      <field name="Valid" cname="valid" type="gboolean" />
    </struct>
    <struct name="TransactionObj" cname="PkTransactionObj" opaque="true">
      <field name="Tid" cname="tid" type="gchar*" access="public" writeable="true" />
      <field name="Timespec" cname="timespec" type="gchar*" access="public" writeable="true" />
      <field name="Succeeded" cname="succeeded" type="gboolean" access="public" writeable="true" />
      <field name="Role" cname="role" type="PkRoleEnum" access="public" writeable="true" />
      <field name="Duration" cname="duration" type="guint" access="public" writeable="true" />
      <field name="Data" cname="data" type="gchar*" access="public" writeable="true" />
      <field name="Uid" cname="uid" type="guint" access="public" writeable="true" />
      <field name="Cmdline" cname="cmdline" type="gchar*" access="public" writeable="true" />
      <method name="Copy" cname="pk_transaction_obj_copy">
        <return-type type="PkTransactionObj*" owned="true" />
      </method>
      <method name="Free" cname="pk_transaction_obj_free">
        <return-type type="gboolean" />
      </method>
      <constructor cname="pk_transaction_obj_new" />
      <constructor cname="pk_transaction_obj_new_from_data">
        <parameters>
          <parameter type="const-gchar*" name="tid" />
          <parameter type="const-gchar*" name="timespec" />
          <parameter type="gboolean" name="succeeded" />
          <parameter type="PkRoleEnum" name="role" />
          <parameter type="guint" name="duration" />
          <parameter type="const-gchar*" name="data" />
          <parameter type="guint" name="uid" />
          <parameter type="const-gchar*" name="cmdline" />
        </parameters>
      </constructor>
    </struct>
    <struct name="UpdateDetailObj" cname="PkUpdateDetailObj" opaque="true">
      <field name="Id" cname="id" type="PkPackageId*" access="public" writeable="true" />
      <field name="Updates" cname="updates" type="gchar*" access="public" writeable="true" />
      <field name="Obsoletes" cname="obsoletes" type="gchar*" access="public" writeable="true" />
      <field name="VendorUrl" cname="vendor_url" type="gchar*" access="public" writeable="true" />
      <field name="BugzillaUrl" cname="bugzilla_url" type="gchar*" access="public" writeable="true" />
      <field name="CveUrl" cname="cve_url" type="gchar*" access="public" writeable="true" />
      <field name="Restart" cname="restart" type="PkRestartEnum" access="public" writeable="true" />
      <field name="UpdateText" cname="update_text" type="gchar*" access="public" writeable="true" />
      <field name="Changelog" cname="changelog" type="gchar*" access="public" writeable="true" />
      <field name="State" cname="state" type="PkUpdateStateEnum" access="public" writeable="true" />
      <field name="Issued" cname="issued" type="GDate*" access="public" writeable="true" />
      <field name="Updated" cname="updated" type="GDate*" access="public" writeable="true" />
      <method name="Copy" cname="pk_update_detail_obj_copy">
        <return-type type="PkUpdateDetailObj*" owned="true" />
      </method>
      <method name="Free" cname="pk_update_detail_obj_free">
        <return-type type="gboolean" />
      </method>
      <constructor cname="pk_update_detail_obj_new" />
      <constructor cname="pk_update_detail_obj_new_from_data">
        <parameters>
          <parameter type="const-PkPackageId*" name="id" />
          <parameter type="const-gchar*" name="updates" />
          <parameter type="const-gchar*" name="obsoletes" />
          <parameter type="const-gchar*" name="vendor_url" />
          <parameter type="const-gchar*" name="bugzilla_url" />
          <parameter type="const-gchar*" name="cve_url" />
          <parameter type="PkRestartEnum" name="restart" />
          <parameter type="const-gchar*" name="update_text" />
          <parameter type="const-gchar*" name="changelog" />
          <parameter type="PkUpdateStateEnum" name="state" />
          <parameter type="GDate*" name="issued" />
          <parameter type="GDate*" name="updated" />
        </parameters>
      </constructor>
    </struct>
    <class name="Bitfield" cname="PkBitfield_">
      <method name="ContainPriority" cname="pk_bitfield_contain_priority" shared="true">
        <return-type type="gint" />
        <parameters>
          <parameter type="PkBitfield" name="values" />
          <parameter type="gint" name="value" />
          <parameter ellipsis="true" />
        </parameters>
      </method>
      <method name="FromEnums" cname="pk_bitfield_from_enums" shared="true">
        <return-type type="PkBitfield" />
        <parameters>
          <parameter type="gint" name="value" />
          <parameter ellipsis="true" />
        </parameters>
      </method>
    </class>
    <class name="Distro" cname="PkDistro_">
      <method name="UpgradeEnumFromText" cname="pk_distro_upgrade_enum_from_text" shared="true">
        <return-type type="PkDistroUpgradeEnum" />
        <parameters>
          <parameter type="const-gchar*" name="upgrade" />
        </parameters>
      </method>
      <method name="UpgradeEnumToText" cname="pk_distro_upgrade_enum_to_text" shared="true">
        <return-type type="const-gchar*" />
        <parameters>
          <parameter type="PkDistroUpgradeEnum" name="upgrade" />
        </parameters>
      </method>
    </class>
    <class name="Enum" cname="PkEnum_">
      <method name="FindString" cname="pk_enum_find_string" shared="true">
        <return-type type="const-gchar*" />
        <parameters>
          <parameter type="const-PkEnumMatch*" name="table" />
          <parameter type="guint" name="value" />
        </parameters>
      </method>
      <method name="FindValue" cname="pk_enum_find_value" shared="true">
        <return-type type="guint" />
        <parameters>
          <parameter type="const-PkEnumMatch*" name="table" />
          <parameter type="const-gchar*" name="string" />
        </parameters>
      </method>
    </class>
    <class name="Error" cname="PkError_">
      <method name="EnumFromText" cname="pk_error_enum_from_text" shared="true">
        <return-type type="PkErrorCodeEnum" />
        <parameters>
          <parameter type="const-gchar*" name="code" />
        </parameters>
      </method>
      <method name="EnumToText" cname="pk_error_enum_to_text" shared="true">
        <return-type type="const-gchar*" />
        <parameters>
          <parameter type="PkErrorCodeEnum" name="code" />
        </parameters>
      </method>
    </class>
    <class name="Exit" cname="PkExit_">
      <method name="EnumFromText" cname="pk_exit_enum_from_text" shared="true">
        <return-type type="PkExitEnum" />
        <parameters>
          <parameter type="const-gchar*" name="exit" />
        </parameters>
      </method>
      <method name="EnumToText" cname="pk_exit_enum_to_text" shared="true">
        <return-type type="const-gchar*" />
        <parameters>
          <parameter type="PkExitEnum" name="exit" />
        </parameters>
      </method>
    </class>
    <class name="Filter" cname="PkFilter_">
      <method name="BitfieldFromText" cname="pk_filter_bitfield_from_text" shared="true">
        <return-type type="PkBitfield" />
        <parameters>
          <parameter type="const-gchar*" name="filters" />
        </parameters>
      </method>
      <method name="BitfieldToText" cname="pk_filter_bitfield_to_text" shared="true">
        <return-type type="gchar*" />
        <parameters>
          <parameter type="PkBitfield" name="filters" />
        </parameters>
      </method>
      <method name="EnumFromText" cname="pk_filter_enum_from_text" shared="true">
        <return-type type="PkFilterEnum" />
        <parameters>
          <parameter type="const-gchar*" name="filter" />
        </parameters>
      </method>
      <method name="EnumToText" cname="pk_filter_enum_to_text" shared="true">
        <return-type type="const-gchar*" />
        <parameters>
          <parameter type="PkFilterEnum" name="filter" />
        </parameters>
      </method>
    </class>
    <class name="Global" cname="PkGlobal">
      <method name="GetDistroId" cname="pk_get_distro_id" shared="true">
        <return-type type="gchar*" />
      </method>
      <method name="PtrArrayToStrv" cname="pk_ptr_array_to_strv" shared="true">
        <return-type type="gchar**" />
        <parameters>
          <parameter type="GPtrArray*" name="array" />
        </parameters>
      </method>
      <method name="StrvToPtrArray" cname="pk_strv_to_ptr_array" shared="true">
        <return-type type="GPtrArray*" />
        <parameters>
          <parameter type="gchar**" name="array" />
        </parameters>
      </method>
      <method name="VaListToArgv" cname="pk_va_list_to_argv" shared="true">
        <return-type type="gchar**" />
        <parameters>
          <parameter type="const-gchar*" name="string_first" />
          <parameter type="va_list*" name="args" />
        </parameters>
      </method>
    </class>
    <class name="Group" cname="PkGroup_">
      <method name="BitfieldFromText" cname="pk_group_bitfield_from_text" shared="true">
        <return-type type="PkBitfield" />
        <parameters>
          <parameter type="const-gchar*" name="groups" />
        </parameters>
      </method>
      <method name="BitfieldToText" cname="pk_group_bitfield_to_text" shared="true">
        <return-type type="gchar*" />
        <parameters>
          <parameter type="PkBitfield" name="groups" />
        </parameters>
      </method>
      <method name="EnumFromText" cname="pk_group_enum_from_text" shared="true">
        <return-type type="PkGroupEnum" />
        <parameters>
          <parameter type="const-gchar*" name="group" />
        </parameters>
      </method>
      <method name="EnumToText" cname="pk_group_enum_to_text" shared="true">
        <return-type type="const-gchar*" />
        <parameters>
          <parameter type="PkGroupEnum" name="group" />
        </parameters>
      </method>
    </class>
    <class name="Info" cname="PkInfo_">
      <method name="EnumFromText" cname="pk_info_enum_from_text" shared="true">
        <return-type type="PkInfoEnum" />
        <parameters>
          <parameter type="const-gchar*" name="info" />
        </parameters>
      </method>
      <method name="EnumToText" cname="pk_info_enum_to_text" shared="true">
        <return-type type="const-gchar*" />
        <parameters>
          <parameter type="PkInfoEnum" name="info" />
        </parameters>
      </method>
    </class>
    <class name="License" cname="PkLicense_">
      <method name="EnumFromText" cname="pk_license_enum_from_text" shared="true">
        <return-type type="PkLicenseEnum" />
        <parameters>
          <parameter type="const-gchar*" name="license" />
        </parameters>
      </method>
      <method name="EnumToText" cname="pk_license_enum_to_text" shared="true">
        <return-type type="const-gchar*" />
        <parameters>
          <parameter type="PkLicenseEnum" name="license" />
        </parameters>
      </method>
    </class>
    <class name="Message" cname="PkMessage_">
      <method name="EnumFromText" cname="pk_message_enum_from_text" shared="true">
        <return-type type="PkMessageEnum" />
        <parameters>
          <parameter type="const-gchar*" name="message" />
        </parameters>
      </method>
      <method name="EnumToText" cname="pk_message_enum_to_text" shared="true">
        <return-type type="const-gchar*" />
        <parameters>
          <parameter type="PkMessageEnum" name="message" />
        </parameters>
      </method>
    </class>
    <class name="Network" cname="PkNetwork_">
      <method name="EnumFromText" cname="pk_network_enum_from_text" shared="true">
        <return-type type="PkNetworkEnum" />
        <parameters>
          <parameter type="const-gchar*" name="network" />
        </parameters>
      </method>
      <method name="EnumToText" cname="pk_network_enum_to_text" shared="true">
        <return-type type="const-gchar*" />
        <parameters>
          <parameter type="PkNetworkEnum" name="network" />
        </parameters>
      </method>
    </class>
    <class name="Package" cname="PkPackage_">
      <method name="IdsCheck" cname="pk_package_ids_check" shared="true">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="gchar**" name="package_ids" />
        </parameters>
      </method>
      <method name="IdsFromArray" cname="pk_package_ids_from_array" shared="true">
        <return-type type="gchar**" />
        <parameters>
          <parameter type="GPtrArray*" name="array" />
        </parameters>
      </method>
      <method name="IdsFromId" cname="pk_package_ids_from_id" shared="true">
        <return-type type="gchar**" />
        <parameters>
          <parameter type="const-gchar*" name="package_id" />
        </parameters>
      </method>
      <method name="IdsFromText" cname="pk_package_ids_from_text" shared="true">
        <return-type type="gchar**" />
        <parameters>
          <parameter type="const-gchar*" name="package_id" />
        </parameters>
      </method>
      <method name="IdsFromVaList" cname="pk_package_ids_from_va_list" shared="true">
        <return-type type="gchar**" />
        <parameters>
          <parameter type="const-gchar*" name="package_id_first" />
          <parameter type="va_list*" name="args" />
        </parameters>
      </method>
      <method name="IdsPrint" cname="pk_package_ids_print" shared="true">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="gchar**" name="package_ids" />
        </parameters>
      </method>
      <method name="IdsSize" cname="pk_package_ids_size" shared="true">
        <return-type type="guint" />
        <parameters>
          <parameter type="gchar**" name="package_ids" />
        </parameters>
      </method>
      <method name="IdsToText" cname="pk_package_ids_to_text" shared="true">
        <return-type type="gchar*" />
        <parameters>
          <parameter type="gchar**" name="package_ids" />
        </parameters>
      </method>
    </class>
    <class name="Provides" cname="PkProvides_">
      <method name="EnumFromText" cname="pk_provides_enum_from_text" shared="true">
        <return-type type="PkProvidesEnum" />
        <parameters>
          <parameter type="const-gchar*" name="provides" />
        </parameters>
      </method>
      <method name="EnumToText" cname="pk_provides_enum_to_text" shared="true">
        <return-type type="const-gchar*" />
        <parameters>
          <parameter type="PkProvidesEnum" name="provides" />
        </parameters>
      </method>
    </class>
    <class name="Restart" cname="PkRestart_">
      <method name="EnumFromText" cname="pk_restart_enum_from_text" shared="true">
        <return-type type="PkRestartEnum" />
        <parameters>
          <parameter type="const-gchar*" name="restart" />
        </parameters>
      </method>
      <method name="EnumToText" cname="pk_restart_enum_to_text" shared="true">
        <return-type type="const-gchar*" />
        <parameters>
          <parameter type="PkRestartEnum" name="restart" />
        </parameters>
      </method>
    </class>
    <class name="Role" cname="PkRole_">
      <method name="BitfieldFromText" cname="pk_role_bitfield_from_text" shared="true">
        <return-type type="PkBitfield" />
        <parameters>
          <parameter type="const-gchar*" name="roles" />
        </parameters>
      </method>
      <method name="BitfieldToText" cname="pk_role_bitfield_to_text" shared="true">
        <return-type type="gchar*" />
        <parameters>
          <parameter type="PkBitfield" name="roles" />
        </parameters>
      </method>
      <method name="EnumFromText" cname="pk_role_enum_from_text" shared="true">
        <return-type type="PkRoleEnum" />
        <parameters>
          <parameter type="const-gchar*" name="role" />
        </parameters>
      </method>
      <method name="EnumToText" cname="pk_role_enum_to_text" shared="true">
        <return-type type="const-gchar*" />
        <parameters>
          <parameter type="PkRoleEnum" name="role" />
        </parameters>
      </method>
    </class>
    <class name="Sig" cname="PkSig_">
      <method name="TypeEnumFromText" cname="pk_sig_type_enum_from_text" shared="true">
        <return-type type="PkSigTypeEnum" />
        <parameters>
          <parameter type="const-gchar*" name="sig_type" />
        </parameters>
      </method>
      <method name="TypeEnumToText" cname="pk_sig_type_enum_to_text" shared="true">
        <return-type type="const-gchar*" />
        <parameters>
          <parameter type="PkSigTypeEnum" name="sig_type" />
        </parameters>
      </method>
    </class>
    <class name="Status" cname="PkStatus_">
      <method name="EnumFromText" cname="pk_status_enum_from_text" shared="true">
        <return-type type="PkStatusEnum" />
        <parameters>
          <parameter type="const-gchar*" name="status" />
        </parameters>
      </method>
      <method name="EnumToText" cname="pk_status_enum_to_text" shared="true">
        <return-type type="const-gchar*" />
        <parameters>
          <parameter type="PkStatusEnum" name="status" />
        </parameters>
      </method>
    </class>
    <class name="Update" cname="PkUpdate_">
      <method name="StateEnumFromText" cname="pk_update_state_enum_from_text" shared="true">
        <return-type type="PkUpdateStateEnum" />
        <parameters>
          <parameter type="const-gchar*" name="update_state" />
        </parameters>
      </method>
      <method name="StateEnumToText" cname="pk_update_state_enum_to_text" shared="true">
        <return-type type="const-gchar*" />
        <parameters>
          <parameter type="PkUpdateStateEnum" name="update_state" />
        </parameters>
      </method>
    </class>
  </namespace>
</api>