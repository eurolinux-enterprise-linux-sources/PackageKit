// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace PackageKitSharp {

	using System;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[GLib.CDeclCallback]
	internal delegate IntPtr ObjListNewFuncNative();

	internal class ObjListNewFuncInvoker {

		ObjListNewFuncNative native_cb;
		IntPtr __data;
		GLib.DestroyNotify __notify;

		~ObjListNewFuncInvoker ()
		{
			if (__notify == null)
				return;
			__notify (__data);
		}

		internal ObjListNewFuncInvoker (ObjListNewFuncNative native_cb) : this (native_cb, IntPtr.Zero, null) {}

		internal ObjListNewFuncInvoker (ObjListNewFuncNative native_cb, IntPtr data) : this (native_cb, data, null) {}

		internal ObjListNewFuncInvoker (ObjListNewFuncNative native_cb, IntPtr data, GLib.DestroyNotify notify)
		{
			this.native_cb = native_cb;
			__data = data;
			__notify = notify;
		}

		internal PackageKit.ObjListNewFunc Handler {
			get {
				return new PackageKit.ObjListNewFunc(InvokeNative);
			}
		}

		IntPtr InvokeNative ()
		{
			IntPtr result = native_cb ();
			return result;
		}
	}

	internal class ObjListNewFuncWrapper {

		public IntPtr NativeCallback ()
		{
			try {
				IntPtr __ret = managed ();
				if (release_on_call)
					gch.Free ();
				return __ret;
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: Above call does not return.
				throw e;
			}
		}

		bool release_on_call = false;
		GCHandle gch;

		public void PersistUntilCalled ()
		{
			release_on_call = true;
			gch = GCHandle.Alloc (this);
		}

		internal ObjListNewFuncNative NativeDelegate;
		PackageKit.ObjListNewFunc managed;

		public ObjListNewFuncWrapper (PackageKit.ObjListNewFunc managed)
		{
			this.managed = managed;
			if (managed != null)
				NativeDelegate = new ObjListNewFuncNative (NativeCallback);
		}

		public static PackageKit.ObjListNewFunc GetManagedDelegate (ObjListNewFuncNative native)
		{
			if (native == null)
				return null;
			ObjListNewFuncWrapper wrapper = (ObjListNewFuncWrapper) native.Target;
			if (wrapper == null)
				return null;
			return wrapper.managed;
		}
	}
#endregion
}
