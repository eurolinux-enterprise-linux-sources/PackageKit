// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace PackageKit {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public class PackageList : PackageKit.ObjList {

		[Obsolete]
		protected PackageList(GLib.GType gtype) : base(gtype) {}
		public PackageList(IntPtr raw) : base(raw) {}

		[DllImport("libpackagekit-glib.dll")]
		static extern IntPtr pk_package_list_new();

		public PackageList () : base (IntPtr.Zero)
		{
			if (GetType () != typeof (PackageList)) {
				CreateNativeObject (new string [0], new GLib.Value[0]);
				return;
			}
			Raw = pk_package_list_new();
		}

		[DllImport("libpackagekit-glib.dll")]
		static extern bool pk_package_list_remove(IntPtr raw, IntPtr package_id);

		public bool Remove(string package_id) {
			IntPtr native_package_id = GLib.Marshaller.StringToPtrGStrdup (package_id);
			bool raw_ret = pk_package_list_remove(Handle, native_package_id);
			bool ret = raw_ret;
			GLib.Marshaller.Free (native_package_id);
			return ret;
		}

		[DllImport("libpackagekit-glib.dll")]
		static extern bool pk_package_list_contains(IntPtr raw, IntPtr package_id);

		public bool Contains(string package_id) {
			IntPtr native_package_id = GLib.Marshaller.StringToPtrGStrdup (package_id);
			bool raw_ret = pk_package_list_contains(Handle, native_package_id);
			bool ret = raw_ret;
			GLib.Marshaller.Free (native_package_id);
			return ret;
		}

		[DllImport("libpackagekit-glib.dll")]
		static extern bool pk_package_list_sort(IntPtr raw);

		public bool Sort() {
			bool raw_ret = pk_package_list_sort(Handle);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libpackagekit-glib.dll")]
		static extern bool pk_package_list_sort_info(IntPtr raw);

		public bool SortInfo() {
			bool raw_ret = pk_package_list_sort_info(Handle);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libpackagekit-glib.dll")]
		static extern bool pk_package_list_set_fuzzy_arch(IntPtr raw, bool fuzzy_arch);

		public bool SetFuzzyArch(bool fuzzy_arch) {
			bool raw_ret = pk_package_list_set_fuzzy_arch(Handle, fuzzy_arch);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libpackagekit-glib.dll")]
		static extern uint pk_package_list_get_size(IntPtr raw);

		public uint Size { 
			get {
				uint raw_ret = pk_package_list_get_size(Handle);
				uint ret = raw_ret;
				return ret;
			}
		}

		[DllImport("libpackagekit-glib.dll")]
		static extern IntPtr pk_package_list_to_strv(IntPtr raw);

		public string[] ToStringArray() {
			IntPtr raw_ret = pk_package_list_to_strv(Handle);
			string[] ret = GLib.Marshaller.NullTermPtrToStringArray (raw_ret, false);
			return ret;
		}

		[DllImport("libpackagekit-glib.dll")]
		static extern bool pk_package_list_sort_summary(IntPtr raw);

		public bool SortSummary() {
			bool raw_ret = pk_package_list_sort_summary(Handle);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libpackagekit-glib.dll")]
		static extern bool pk_package_list_add(IntPtr raw, int info, IntPtr ident, IntPtr summary);

		public bool Add(PackageKit.InfoEnum info, PackageKit.PackageId ident, string summary) {
			IntPtr native_summary = GLib.Marshaller.StringToPtrGStrdup (summary);
			bool raw_ret = pk_package_list_add(Handle, (int) info, ident == null ? IntPtr.Zero : ident.Handle, native_summary);
			bool ret = raw_ret;
			GLib.Marshaller.Free (native_summary);
			return ret;
		}

		[DllImport("libpackagekit-glib.dll")]
		static extern IntPtr pk_package_list_get_type();

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = pk_package_list_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}


		static PackageList ()
		{
			GtkSharp.PackagekitSharp.ObjectManager.Initialize ();
		}
#endregion
#region Customized extensions
#line 1 "PackageList.custom"
/*
 * PackageList.custom
 *
 * Author(s):
 *	Stephane Delcroix  (stephane@delcroix.org)
 *
 * Copyright (c) 2009 Novell, Inc.
 *
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 */
		[DllImport("libpackagekit-glib.dll")]
		static extern IntPtr pk_package_list_get_obj(IntPtr raw, uint item);

		public PackageKit.PackageObj this[uint item] {
			get {
				IntPtr raw_ret = pk_package_list_get_obj(Handle, item);
				PackageKit.PackageObj ret = raw_ret == IntPtr.Zero ? null : (PackageKit.PackageObj) GLib.Opaque.GetOpaque (raw_ret, typeof (PackageKit.PackageObj), false);
				return ret;
			}
		}



#endregion
	}
}
