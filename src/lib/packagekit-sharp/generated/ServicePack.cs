// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace PackageKit {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public class ServicePack : GLib.Object {

		[Obsolete]
		protected ServicePack(GLib.GType gtype) : base(gtype) {}
		public ServicePack(IntPtr raw) : base(raw) {}

		[DllImport("libpackagekit-glib.dll")]
		static extern IntPtr pk_service_pack_new();

		public ServicePack () : base (IntPtr.Zero)
		{
			if (GetType () != typeof (ServicePack)) {
				CreateNativeObject (new string [0], new GLib.Value[0]);
				return;
			}
			Raw = pk_service_pack_new();
		}

		[GLib.CDeclCallback]
		delegate void PackageVMDelegate (IntPtr pack, IntPtr obj);

		static PackageVMDelegate PackageVMCallback;

		static void package_cb (IntPtr pack, IntPtr obj)
		{
			try {
				ServicePack pack_managed = GLib.Object.GetObject (pack, false) as ServicePack;
				pack_managed.OnPackage (obj == IntPtr.Zero ? null : (PackageKit.PackageObj) GLib.Opaque.GetOpaque (obj, typeof (PackageKit.PackageObj), false));
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		private static void OverridePackage (GLib.GType gtype)
		{
			if (PackageVMCallback == null)
				PackageVMCallback = new PackageVMDelegate (package_cb);
			OverrideVirtualMethod (gtype, "package", PackageVMCallback);
		}

		[GLib.DefaultSignalHandler(Type=typeof(PackageKit.ServicePack), ConnectionMethod="OverridePackage")]
		protected virtual void OnPackage (PackageKit.PackageObj obj)
		{
			GLib.Value ret = GLib.Value.Empty;
			GLib.ValueArray inst_and_params = new GLib.ValueArray (2);
			GLib.Value[] vals = new GLib.Value [2];
			vals [0] = new GLib.Value (this);
			inst_and_params.Append (vals [0]);
			vals [1] = new GLib.Value (obj);
			inst_and_params.Append (vals [1]);
			g_signal_chain_from_overridden (inst_and_params.ArrayPtr, ref ret);
			foreach (GLib.Value v in vals)
				v.Dispose ();
		}

		[GLib.CDeclCallback]
		delegate void PackageSignalDelegate (IntPtr arg0, IntPtr arg1, IntPtr gch);

		static void PackageSignalCallback (IntPtr arg0, IntPtr arg1, IntPtr gch)
		{
			PackageKit.PackageArgs args = new PackageKit.PackageArgs ();
			try {
				GLib.Signal sig = ((GCHandle) gch).Target as GLib.Signal;
				if (sig == null)
					throw new Exception("Unknown signal GC handle received " + gch);

				args.Args = new object[1];
				args.Args[0] = arg1 == IntPtr.Zero ? null : (PackageKit.PackageObj) GLib.Opaque.GetOpaque (arg1, typeof (PackageKit.PackageObj), false);
				PackageKit.PackageHandler handler = (PackageKit.PackageHandler) sig.Handler;
				handler (GLib.Object.GetObject (arg0), args);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[GLib.Signal("package")]
		public event PackageKit.PackageHandler Package {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "package", new PackageSignalDelegate(PackageSignalCallback));
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "package", new PackageSignalDelegate(PackageSignalCallback));
				sig.RemoveDelegate (value);
			}
		}

		[GLib.CDeclCallback]
		delegate void PercentageVMDelegate (IntPtr pack, uint percentage);

		static PercentageVMDelegate PercentageVMCallback;

		static void percentage_cb (IntPtr pack, uint percentage)
		{
			try {
				ServicePack pack_managed = GLib.Object.GetObject (pack, false) as ServicePack;
				pack_managed.OnPercentage (percentage);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		private static void OverridePercentage (GLib.GType gtype)
		{
			if (PercentageVMCallback == null)
				PercentageVMCallback = new PercentageVMDelegate (percentage_cb);
			OverrideVirtualMethod (gtype, "percentage", PercentageVMCallback);
		}

		[GLib.DefaultSignalHandler(Type=typeof(PackageKit.ServicePack), ConnectionMethod="OverridePercentage")]
		protected virtual void OnPercentage (uint percentage)
		{
			GLib.Value ret = GLib.Value.Empty;
			GLib.ValueArray inst_and_params = new GLib.ValueArray (2);
			GLib.Value[] vals = new GLib.Value [2];
			vals [0] = new GLib.Value (this);
			inst_and_params.Append (vals [0]);
			vals [1] = new GLib.Value (percentage);
			inst_and_params.Append (vals [1]);
			g_signal_chain_from_overridden (inst_and_params.ArrayPtr, ref ret);
			foreach (GLib.Value v in vals)
				v.Dispose ();
		}

		[GLib.Signal("percentage")]
		public event PackageKit.PercentageHandler Percentage {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "percentage", typeof (PackageKit.PercentageArgs));
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "percentage", typeof (PackageKit.PercentageArgs));
				sig.RemoveDelegate (value);
			}
		}

		[GLib.CDeclCallback]
		delegate void StatusVMDelegate (IntPtr pack, int status);

		static StatusVMDelegate StatusVMCallback;

		static void status_cb (IntPtr pack, int status)
		{
			try {
				ServicePack pack_managed = GLib.Object.GetObject (pack, false) as ServicePack;
				pack_managed.OnStatus ((PackageKit.ServicePackStatus) status);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		private static void OverrideStatus (GLib.GType gtype)
		{
			if (StatusVMCallback == null)
				StatusVMCallback = new StatusVMDelegate (status_cb);
			OverrideVirtualMethod (gtype, "status", StatusVMCallback);
		}

		[GLib.DefaultSignalHandler(Type=typeof(PackageKit.ServicePack), ConnectionMethod="OverrideStatus")]
		protected virtual void OnStatus (PackageKit.ServicePackStatus status)
		{
			GLib.Value ret = GLib.Value.Empty;
			GLib.ValueArray inst_and_params = new GLib.ValueArray (2);
			GLib.Value[] vals = new GLib.Value [2];
			vals [0] = new GLib.Value (this);
			inst_and_params.Append (vals [0]);
			vals [1] = new GLib.Value (status);
			inst_and_params.Append (vals [1]);
			g_signal_chain_from_overridden (inst_and_params.ArrayPtr, ref ret);
			foreach (GLib.Value v in vals)
				v.Dispose ();
		}

		[GLib.Signal("status")]
		public event PackageKit.StatusHandler Status {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "status", typeof (PackageKit.StatusArgs));
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "status", typeof (PackageKit.StatusArgs));
				sig.RemoveDelegate (value);
			}
		}

		[DllImport("libpackagekit-glib.dll")]
		static extern unsafe bool pk_service_pack_create_for_package_ids(IntPtr raw, IntPtr package_ids, out IntPtr error);

		public unsafe bool CreateForPackageIds(string package_ids) {
			IntPtr error = IntPtr.Zero;
			bool raw_ret = pk_service_pack_create_for_package_ids(Handle, GLib.Marshaller.StringToPtrGStrdup(package_ids), out error);
			bool ret = raw_ret;
			if (error != IntPtr.Zero) throw new GLib.GException (error);
			return ret;
		}

		[DllImport("libpackagekit-glib.dll")]
		static extern bool pk_service_pack_set_exclude_list(IntPtr raw, IntPtr list);

		public bool SetExcludeList(PackageKit.PackageList list) {
			bool raw_ret = pk_service_pack_set_exclude_list(Handle, list == null ? IntPtr.Zero : list.Handle);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libpackagekit-glib.dll")]
		static extern bool pk_service_pack_set_temp_directory(IntPtr raw, IntPtr directory);

		public bool SetTempDirectory(string directory) {
			IntPtr native_directory = GLib.Marshaller.StringToPtrGStrdup (directory);
			bool raw_ret = pk_service_pack_set_temp_directory(Handle, native_directory);
			bool ret = raw_ret;
			GLib.Marshaller.Free (native_directory);
			return ret;
		}

		[DllImport("libpackagekit-glib.dll")]
		static extern unsafe bool pk_service_pack_cancel(IntPtr raw, out IntPtr error);

		public unsafe bool Cancel() {
			IntPtr error = IntPtr.Zero;
			bool raw_ret = pk_service_pack_cancel(Handle, out error);
			bool ret = raw_ret;
			if (error != IntPtr.Zero) throw new GLib.GException (error);
			return ret;
		}

		[DllImport("libpackagekit-glib.dll")]
		static extern bool pk_service_pack_set_filename(IntPtr raw, IntPtr filename);

		public bool SetFilename(string filename) {
			IntPtr native_filename = GLib.Marshaller.StringToPtrGStrdup (filename);
			bool raw_ret = pk_service_pack_set_filename(Handle, native_filename);
			bool ret = raw_ret;
			GLib.Marshaller.Free (native_filename);
			return ret;
		}

		[DllImport("libpackagekit-glib.dll")]
		static extern unsafe bool pk_service_pack_check_valid(IntPtr raw, out IntPtr error);

		public unsafe bool CheckValid() {
			IntPtr error = IntPtr.Zero;
			bool raw_ret = pk_service_pack_check_valid(Handle, out error);
			bool ret = raw_ret;
			if (error != IntPtr.Zero) throw new GLib.GException (error);
			return ret;
		}

		[DllImport("libpackagekit-glib.dll")]
		static extern int pk_service_pack_error_quark();

		public static int ErrorQuark() {
			int raw_ret = pk_service_pack_error_quark();
			int ret = raw_ret;
			return ret;
		}

		[DllImport("libpackagekit-glib.dll")]
		static extern unsafe bool pk_service_pack_create_for_updates(IntPtr raw, out IntPtr error);

		public unsafe bool CreateForUpdates() {
			IntPtr error = IntPtr.Zero;
			bool raw_ret = pk_service_pack_create_for_updates(Handle, out error);
			bool ret = raw_ret;
			if (error != IntPtr.Zero) throw new GLib.GException (error);
			return ret;
		}

		[DllImport("libpackagekit-glib.dll")]
		static extern IntPtr pk_service_pack_get_type();

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = pk_service_pack_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("libpackagekit-glib.dll")]
		static extern unsafe bool pk_service_pack_create_for_package_id(IntPtr raw, IntPtr package_id, out IntPtr error);

		public unsafe bool CreateForPackageId(string package_id) {
			IntPtr native_package_id = GLib.Marshaller.StringToPtrGStrdup (package_id);
			IntPtr error = IntPtr.Zero;
			bool raw_ret = pk_service_pack_create_for_package_id(Handle, native_package_id, out error);
			bool ret = raw_ret;
			GLib.Marshaller.Free (native_package_id);
			if (error != IntPtr.Zero) throw new GLib.GException (error);
			return ret;
		}


		static ServicePack ()
		{
			GtkSharp.PackagekitSharp.ObjectManager.Initialize ();
		}
#endregion
	}
}
