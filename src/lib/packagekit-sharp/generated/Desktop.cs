// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace PackageKit {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public class Desktop : GLib.Object {

		[Obsolete]
		protected Desktop(GLib.GType gtype) : base(gtype) {}
		public Desktop(IntPtr raw) : base(raw) {}

		[DllImport("libpackagekit-glib.dll")]
		static extern IntPtr pk_desktop_new();

		public Desktop () : base (IntPtr.Zero)
		{
			if (GetType () != typeof (Desktop)) {
				CreateNativeObject (new string [0], new GLib.Value[0]);
				return;
			}
			Raw = pk_desktop_new();
		}

		[DllImport("libpackagekit-glib.dll")]
		static extern unsafe IntPtr pk_desktop_get_files_for_package(IntPtr raw, IntPtr package, out IntPtr error);

		public unsafe GLib.PtrArray GetFilesForPackage(string package) {
			IntPtr native_package = GLib.Marshaller.StringToPtrGStrdup (package);
			IntPtr error = IntPtr.Zero;
			IntPtr raw_ret = pk_desktop_get_files_for_package(Handle, native_package, out error);
			GLib.PtrArray ret = new GLib.PtrArray(raw_ret);
			GLib.Marshaller.Free (native_package);
			if (error != IntPtr.Zero) throw new GLib.GException (error);
			return ret;
		}

		[DllImport("libpackagekit-glib.dll")]
		static extern unsafe IntPtr pk_desktop_get_shown_for_package(IntPtr raw, IntPtr package, out IntPtr error);

		public unsafe GLib.PtrArray GetShownForPackage(string package) {
			IntPtr native_package = GLib.Marshaller.StringToPtrGStrdup (package);
			IntPtr error = IntPtr.Zero;
			IntPtr raw_ret = pk_desktop_get_shown_for_package(Handle, native_package, out error);
			GLib.PtrArray ret = new GLib.PtrArray(raw_ret);
			GLib.Marshaller.Free (native_package);
			if (error != IntPtr.Zero) throw new GLib.GException (error);
			return ret;
		}

		[DllImport("libpackagekit-glib.dll")]
		static extern IntPtr pk_desktop_get_type();

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = pk_desktop_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("libpackagekit-glib.dll")]
		static extern unsafe IntPtr pk_desktop_get_package_for_file(IntPtr raw, IntPtr filename, out IntPtr error);

		public unsafe string GetPackageForFile(string filename) {
			IntPtr native_filename = GLib.Marshaller.StringToPtrGStrdup (filename);
			IntPtr error = IntPtr.Zero;
			IntPtr raw_ret = pk_desktop_get_package_for_file(Handle, native_filename, out error);
			string ret = GLib.Marshaller.PtrToStringGFree(raw_ret);
			GLib.Marshaller.Free (native_filename);
			if (error != IntPtr.Zero) throw new GLib.GException (error);
			return ret;
		}

		[DllImport("libpackagekit-glib.dll")]
		static extern unsafe bool pk_desktop_open_database(IntPtr raw, out IntPtr error);

		public unsafe bool OpenDatabase() {
			IntPtr error = IntPtr.Zero;
			bool raw_ret = pk_desktop_open_database(Handle, out error);
			bool ret = raw_ret;
			if (error != IntPtr.Zero) throw new GLib.GException (error);
			return ret;
		}


		static Desktop ()
		{
			GtkSharp.PackagekitSharp.ObjectManager.Initialize ();
		}
#endregion
	}
}
