// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace PackageKitSharp {

	using System;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[GLib.CDeclCallback]
	internal delegate int ObjListCompareFuncNative(IntPtr data1, IntPtr data2);

	internal class ObjListCompareFuncInvoker {

		ObjListCompareFuncNative native_cb;
		IntPtr __data;
		GLib.DestroyNotify __notify;

		~ObjListCompareFuncInvoker ()
		{
			if (__notify == null)
				return;
			__notify (__data);
		}

		internal ObjListCompareFuncInvoker (ObjListCompareFuncNative native_cb) : this (native_cb, IntPtr.Zero, null) {}

		internal ObjListCompareFuncInvoker (ObjListCompareFuncNative native_cb, IntPtr data) : this (native_cb, data, null) {}

		internal ObjListCompareFuncInvoker (ObjListCompareFuncNative native_cb, IntPtr data, GLib.DestroyNotify notify)
		{
			this.native_cb = native_cb;
			__data = data;
			__notify = notify;
		}

		internal PackageKit.ObjListCompareFunc Handler {
			get {
				return new PackageKit.ObjListCompareFunc(InvokeNative);
			}
		}

		int InvokeNative (IntPtr data1, IntPtr data2)
		{
			int result = native_cb (data1, data2);
			return result;
		}
	}

	internal class ObjListCompareFuncWrapper {

		public int NativeCallback (IntPtr data1, IntPtr data2)
		{
			try {
				int __ret = managed (data1, data2);
				if (release_on_call)
					gch.Free ();
				return __ret;
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: Above call does not return.
				throw e;
			}
		}

		bool release_on_call = false;
		GCHandle gch;

		public void PersistUntilCalled ()
		{
			release_on_call = true;
			gch = GCHandle.Alloc (this);
		}

		internal ObjListCompareFuncNative NativeDelegate;
		PackageKit.ObjListCompareFunc managed;

		public ObjListCompareFuncWrapper (PackageKit.ObjListCompareFunc managed)
		{
			this.managed = managed;
			if (managed != null)
				NativeDelegate = new ObjListCompareFuncNative (NativeCallback);
		}

		public static PackageKit.ObjListCompareFunc GetManagedDelegate (ObjListCompareFuncNative native)
		{
			if (native == null)
				return null;
			ObjListCompareFuncWrapper wrapper = (ObjListCompareFuncWrapper) native.Target;
			if (wrapper == null)
				return null;
			return wrapper.managed;
		}
	}
#endregion
}
