// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace PackageKit {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public class Connection : GLib.Object {

		[Obsolete]
		protected Connection(GLib.GType gtype) : base(gtype) {}
		public Connection(IntPtr raw) : base(raw) {}

		[DllImport("libpackagekit-glib.dll")]
		static extern IntPtr pk_connection_new();

		public Connection () : base (IntPtr.Zero)
		{
			if (GetType () != typeof (Connection)) {
				CreateNativeObject (new string [0], new GLib.Value[0]);
				return;
			}
			Raw = pk_connection_new();
		}

		[GLib.CDeclCallback]
		delegate void ConnectionChangedVMDelegate (IntPtr connection, bool connected);

		static ConnectionChangedVMDelegate ConnectionChangedVMCallback;

		static void connectionchanged_cb (IntPtr connection, bool connected)
		{
			try {
				Connection connection_managed = GLib.Object.GetObject (connection, false) as Connection;
				connection_managed.OnConnectionChanged (connected);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		private static void OverrideConnectionChanged (GLib.GType gtype)
		{
			if (ConnectionChangedVMCallback == null)
				ConnectionChangedVMCallback = new ConnectionChangedVMDelegate (connectionchanged_cb);
			OverrideVirtualMethod (gtype, "connection-changed", ConnectionChangedVMCallback);
		}

		[GLib.DefaultSignalHandler(Type=typeof(PackageKit.Connection), ConnectionMethod="OverrideConnectionChanged")]
		protected virtual void OnConnectionChanged (bool connected)
		{
			GLib.Value ret = GLib.Value.Empty;
			GLib.ValueArray inst_and_params = new GLib.ValueArray (2);
			GLib.Value[] vals = new GLib.Value [2];
			vals [0] = new GLib.Value (this);
			inst_and_params.Append (vals [0]);
			vals [1] = new GLib.Value (connected);
			inst_and_params.Append (vals [1]);
			g_signal_chain_from_overridden (inst_and_params.ArrayPtr, ref ret);
			foreach (GLib.Value v in vals)
				v.Dispose ();
		}

		[GLib.Signal("connection-changed")]
		public event PackageKit.ConnectionChangedHandler ConnectionChanged {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "connection-changed", typeof (PackageKit.ConnectionChangedArgs));
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "connection-changed", typeof (PackageKit.ConnectionChangedArgs));
				sig.RemoveDelegate (value);
			}
		}

		[DllImport("libpackagekit-glib.dll")]
		static extern IntPtr pk_connection_get_type();

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = pk_connection_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("libpackagekit-glib.dll")]
		static extern bool pk_connection_valid(IntPtr raw);

		public bool Valid() {
			bool raw_ret = pk_connection_valid(Handle);
			bool ret = raw_ret;
			return ret;
		}


		static Connection ()
		{
			GtkSharp.PackagekitSharp.ObjectManager.Initialize ();
		}
#endregion
	}
}
