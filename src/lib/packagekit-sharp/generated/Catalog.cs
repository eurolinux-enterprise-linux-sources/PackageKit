// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace PackageKit {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public class Catalog : GLib.Object {

		[Obsolete]
		protected Catalog(GLib.GType gtype) : base(gtype) {}
		public Catalog(IntPtr raw) : base(raw) {}

		[DllImport("libpackagekit-glib.dll")]
		static extern IntPtr pk_catalog_new();

		public Catalog () : base (IntPtr.Zero)
		{
			if (GetType () != typeof (Catalog)) {
				CreateNativeObject (new string [0], new GLib.Value[0]);
				return;
			}
			Raw = pk_catalog_new();
		}

		[GLib.CDeclCallback]
		delegate void ProgressVMDelegate (IntPtr inst, uint p0, IntPtr p1);

		static ProgressVMDelegate ProgressVMCallback;

		static void progress_cb (IntPtr inst, uint p0, IntPtr p1)
		{
			try {
				Catalog inst_managed = GLib.Object.GetObject (inst, false) as Catalog;
				inst_managed.OnProgress (p0, GLib.Marshaller.PtrToStringGFree(p1));
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		private static void OverrideProgress (GLib.GType gtype)
		{
			if (ProgressVMCallback == null)
				ProgressVMCallback = new ProgressVMDelegate (progress_cb);
			OverrideVirtualMethod (gtype, "progress", ProgressVMCallback);
		}

		[GLib.DefaultSignalHandler(Type=typeof(PackageKit.Catalog), ConnectionMethod="OverrideProgress")]
		protected virtual void OnProgress (uint p0, string p1)
		{
			GLib.Value ret = GLib.Value.Empty;
			GLib.ValueArray inst_and_params = new GLib.ValueArray (3);
			GLib.Value[] vals = new GLib.Value [3];
			vals [0] = new GLib.Value (this);
			inst_and_params.Append (vals [0]);
			vals [1] = new GLib.Value (p0);
			inst_and_params.Append (vals [1]);
			vals [2] = new GLib.Value (p1);
			inst_and_params.Append (vals [2]);
			g_signal_chain_from_overridden (inst_and_params.ArrayPtr, ref ret);
			foreach (GLib.Value v in vals)
				v.Dispose ();
		}

		[GLib.Signal("progress")]
		public event PackageKit.ProgressHandler Progress {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "progress", typeof (PackageKit.ProgressArgs));
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "progress", typeof (PackageKit.ProgressArgs));
				sig.RemoveDelegate (value);
			}
		}

		[DllImport("libpackagekit-glib.dll")]
		static extern IntPtr pk_catalog_get_type();

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = pk_catalog_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("libpackagekit-glib.dll")]
		static extern IntPtr pk_catalog_process_files(IntPtr raw, IntPtr filenames);

		public PackageKit.PackageList ProcessFiles(string filenames) {
			IntPtr raw_ret = pk_catalog_process_files(Handle, GLib.Marshaller.StringToPtrGStrdup(filenames));
			PackageKit.PackageList ret = GLib.Object.GetObject(raw_ret) as PackageKit.PackageList;
			return ret;
		}

		[DllImport("libpackagekit-glib.dll")]
		static extern bool pk_catalog_cancel(IntPtr raw);

		public bool Cancel() {
			bool raw_ret = pk_catalog_cancel(Handle);
			bool ret = raw_ret;
			return ret;
		}


		static Catalog ()
		{
			GtkSharp.PackagekitSharp.ObjectManager.Initialize ();
		}
#endregion
	}
}
